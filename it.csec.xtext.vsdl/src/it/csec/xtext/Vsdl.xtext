grammar it.csec.xtext.Vsdl with org.eclipse.xtext.common.Terminals

generate vsdl "http://www.csec.it/xtext/Vsdl"


Model:
	'scenario' name=ID ('duration' TimeToUse=TimeInterval)? '{' Elements += ScenElem* '}';

ScenElem:
	Node | 
	Network;
	
Node: 
	'node' name=ID '{' constraints += NodeConstraint* '}';

NodeConstraint:
	GuardedNodeConstraint ';'|
	SimpleNodeConstraint ';';

GuardedNodeConstraint returns NodeConstraint:
	'[' triggerconstraint=UpdateTriggerConstraint ']' '->' nodeconstraint=SimpleNodeConstraint;
	
SimpleNodeConstraint returns NodeConstraint:
	SimpleNodeConstraintAndOr;	
	
SimpleNodeConstraintAndOr returns NodeConstraint:
	SimpleNodeConstraintNot
	(({AndOr.left=current} op=("and"|"or")) right=SimpleNodeConstraintNot)*;
	
SimpleNodeConstraintNot returns NodeConstraint:
	{Not} =>"not" constraint=SimpleNodeConstraintA |
	SimpleNodeConstraintA;

SimpleNodeConstraintA returns NodeConstraint:
	"(" SimpleNodeConstraint ")" |
	NodeHardwareConstraintA |
	NodeSoftwareConstraintA |
	NodeNetworkConstraintA;

NodeHardwareConstraintA returns NodeConstraint:	
	{CPU} =>'cpu' 'speed' op='equal' 'to' value=CPUFrequency |
	{CPU} =>'cpu' op='faster' 'than' value=CPUFrequency |
	{CPU} =>'cpu' op='slower' 'than' value=CPUFrequency |
	{CPU} =>'cpu' 'speed' sameas ?='of' id=[Node] |
	{Disk} =>'disk' 'size' op='equal' 'to' value=DiskSize |
	{Disk} =>'disk' op='larger' 'than' value=DiskSize |
	{Disk} =>'disk' op='smaller' 'than' value=DiskSize |
	{Disk} =>'disk' 'size' sameas ?='of' id=[Node] |
	{Ram} =>'ram' 'size' op='equal' 'to' value=RamSize |
    {Ram} =>'ram' op='larger' 'than' value=RamSize |
    {Ram} =>'ram' op='smaller' 'than' value=RamSize |
    {Ram} =>'ram' 'size' sameas ?='of' id=[Node] |
	{Flavour} =>'flavour' profile=HardwareProfile;

// 节点网络约束
NodeNetworkConstraintA returns NodeConstraint:
    {IP} =>'ip' 'address' op='equal' 'to' ipAddress=IPAddress |
    {IP} =>'ip' 'address' op='in' 'range' ipRange=IPRangeA |
    {IP} =>'ip' 'address' 'is' op='connected' 'to' node=[Node]|
	{Gateway} =>"gateway" 'is' gatewayIP = IPAddress|
    {DNS} => 'DNS' 'is' DNSIP = IPAddress;
    
NodeSoftwareConstraintA returns NodeConstraint:
	'node' {OS} =>'OS' 'is' version=OSVersionE |
	'node' 'OS' {OSFamily} =>'family' 'is' family=OSFamilyE|
	'mounts' 'software' software=SoftwareInstallation;
//	'suffers' 'from' vulnID=VulnerabilityID;
////
//VulnerabilityID:
//    STRING;
	
SoftwareInstallation:
	softwareID=ID ('version' version=VersionNumber)? 
	('with' dependencies+=SoftwareDependency (',' dependencies+=SoftwareDependency)*)? 
	('config' config=ConfigOptions)?;

VersionNumber:
	INT ('.' INT)*;

SoftwareDependency:
	dependencyID=ID;

ConfigOptions:
	'{' configPairs+=ConfigPair (',' configPairs+=ConfigPair)* '}';

ConfigPair:
	key=ID '=' value=STRING;

// Define IP as a part of your Node or Network
//IP:
//    'node' 'has' 'IP' 'address' ipAddress=IPAddress 
//    ('op' op=IPOperation)?
//    ('id' id=[Node])?; 
//

Network:
	'network' name=ID '{' constraints += NetworkConstraint* '}';

NetworkConstraint:
	GuardedNetworkConstraint ';'|
	SimpleNetworkConstraint ';';

GuardedNetworkConstraint returns NetworkConstraint:
	'[' networktriggerconstraint=UpdateTriggerConstraint ']' '->' networkconstraint=SimpleNetworkConstraint;

SimpleNetworkConstraint returns NetworkConstraint:
	SimpleNetworkConstraintAndOr;	

SimpleNetworkConstraintAndOr returns NetworkConstraint:
	SimpleNetworkConstraintNot
	(({AndOr.left=current} op=("and"|"or")) right=SimpleNetworkConstraintNot)*;
	
SimpleNetworkConstraintNot returns NetworkConstraint:
	{Not} =>"not" constraint=SimpleNetworkConstraintA |
	SimpleNetworkConstraintA;

SimpleNetworkConstraintA returns NetworkConstraint:
	"(" SimpleNetworkConstraint ")" |
	NetworkGatewayConstraint |
	NetworkParticipantsConstraint;

NetworkGatewayConstraint returns NetworkConstraint:
	{IPRange} =>"addresses" "range" "is" range=IPRangeA |
	{Gateway} =>"gateway" "has" "direct" "access" "to" "the" internet ?="Internet";

NetworkParticipantsConstraint returns NetworkConstraint:
	"node" id=[Node] "is" op="connected" |
    "node" id=[Node] "has" op="IP" ip=IPAddress;

UpdateTriggerConstraint:
	UpdateTriggerConstraintAndOr;

UpdateTriggerConstraintAndOr returns UpdateTriggerConstraint:
	 UpdateTriggerConstraintNot
	 (({AndOr.left=current} op=("and"|"or")) right=UpdateTriggerConstraintNot)*;
	
UpdateTriggerConstraintNot returns UpdateTriggerConstraint:
	{Not} =>"not" constraint=UpdateTriggerConstraintA |
	UpdateTriggerConstraintA;

UpdateTriggerConstraintA returns UpdateTriggerConstraint:
	"(" UpdateTriggerConstraint ")" |
	{At} =>"at" op="least" "after" variable=ID "=" texp=TimeExpr |
	{At} =>"at" op="most" "before" variable=ID "=" texp=TimeExpr |
	{Switch} =>"switch" "after" variable=ID "=" texp=TimeExpr;

TimeExpr:
	TimeExprAddition;

TimeExprAddition returns TimeExpr:
	 TimeExprMultiplication 
	 (({PlusMinus.left=current} op=("+"|"-")) right=TimeExprMultiplication)*;
        
TimeExprMultiplication returns TimeExpr:
	TimeExprA 
	(({Multiplication.left=current} op='*')
 	   right=TimeExprA)*;

TimeExprA returns TimeExpr:
	'(' TimeExpr ')' |
	variable=ID |
	interval=TimeInterval;
	
TimeInterval:
	value=INT; // unit=('h' | 'm');	

CPUFrequency:
	value=INT unit=('MHz' | 'GHz' | 'THz');

DiskSize:
	value=INT unit=('MB' | 'GB' | 'TB');
	
RamSize:
    value=INT unit=('MB' | 'GB' | 'TB');
    

IPAddress:
	octet1=INT'.'octet2=INT'.'octet3=INT'.'octet4=INT;
	
IPRangeA:
	address=IPAddress'/'bitmask=INT;

OSVersionE:
	'WindowsXP' |
    'Windows7' |
    'Windows8' |
    'Windows10' |
    'Ubuntu14' |
    'Ubuntu16' |
    'Android-21' |
    'Android-19'; // 添加你需要的具体版本
	
OSFamilyE:
	'Microsoft' |
	'Linux' |
	'OSx' |
	'iOS' |
	'Android';

// Define the operation for IP
enum IPOperation:
    connected |
    notConnected;
   
enum HardwareProfile:
		tiny |
		medium |
		large |
		mobile |
		wearable |
		sensor |
		server;
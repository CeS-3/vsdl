/*
 * generated by Xtext 2.35.0
 */
package it.csec.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VsdlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDurationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeToUseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeToUseTimeIntervalParserRuleCall_2_1_0 = (RuleCall)cTimeToUseAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsScenElemParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Model:
		//    'scenario' name=ID ('duration' TimeToUse=TimeInterval)? '{' Elements += ScenElem* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' name=ID ('duration' TimeToUse=TimeInterval)? '{' Elements += ScenElem* '}'
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('duration' TimeToUse=TimeInterval)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'duration'
		public Keyword getDurationKeyword_2_0() { return cDurationKeyword_2_0; }
		
		//TimeToUse=TimeInterval
		public Assignment getTimeToUseAssignment_2_1() { return cTimeToUseAssignment_2_1; }
		
		//TimeInterval
		public RuleCall getTimeToUseTimeIntervalParserRuleCall_2_1_0() { return cTimeToUseTimeIntervalParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//Elements += ScenElem*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//ScenElem
		public RuleCall getElementsScenElemParserRuleCall_4_0() { return cElementsScenElemParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ScenElemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.ScenElem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNetworkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ScenElem:
		//    Node |
		//    Network;
		@Override public ParserRule getRule() { return rule; }
		
		//Node |
		//Network
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Network
		public RuleCall getNetworkParserRuleCall_1() { return cNetworkParserRuleCall_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsNodeConstraintParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Node:
		//    'node' name=ID '{' constraints += NodeConstraint* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'node' name=ID '{' constraints += NodeConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//'node'
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//constraints += NodeConstraint*
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//NodeConstraint
		public RuleCall getConstraintsNodeConstraintParserRuleCall_3_0() { return cConstraintsNodeConstraintParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NodeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.NodeConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cGuardedNodeConstraintParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleNodeConstraintParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//NodeConstraint:
		//    GuardedNodeConstraint ';'|
		//    SimpleNodeConstraint ';';
		@Override public ParserRule getRule() { return rule; }
		
		//GuardedNodeConstraint ';'|
		//SimpleNodeConstraint ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GuardedNodeConstraint ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//GuardedNodeConstraint
		public RuleCall getGuardedNodeConstraintParserRuleCall_0_0() { return cGuardedNodeConstraintParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//SimpleNodeConstraint ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleNodeConstraint
		public RuleCall getSimpleNodeConstraintParserRuleCall_1_0() { return cSimpleNodeConstraintParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class GuardedNodeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.GuardedNodeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTriggerconstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggerconstraintUpdateTriggerConstraintParserRuleCall_1_0 = (RuleCall)cTriggerconstraintAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodeconstraintAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodeconstraintSimpleNodeConstraintParserRuleCall_4_0 = (RuleCall)cNodeconstraintAssignment_4.eContents().get(0);
		
		//GuardedNodeConstraint returns NodeConstraint:
		//    '[' triggerconstraint=UpdateTriggerConstraint ']' '->' nodeconstraint=SimpleNodeConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' triggerconstraint=UpdateTriggerConstraint ']' '->' nodeconstraint=SimpleNodeConstraint
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//triggerconstraint=UpdateTriggerConstraint
		public Assignment getTriggerconstraintAssignment_1() { return cTriggerconstraintAssignment_1; }
		
		//UpdateTriggerConstraint
		public RuleCall getTriggerconstraintUpdateTriggerConstraintParserRuleCall_1_0() { return cTriggerconstraintUpdateTriggerConstraintParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//nodeconstraint=SimpleNodeConstraint
		public Assignment getNodeconstraintAssignment_4() { return cNodeconstraintAssignment_4; }
		
		//SimpleNodeConstraint
		public RuleCall getNodeconstraintSimpleNodeConstraintParserRuleCall_4_0() { return cNodeconstraintSimpleNodeConstraintParserRuleCall_4_0; }
	}
	public class SimpleNodeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SimpleNodeConstraint");
		private final RuleCall cSimpleNodeConstraintAndOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleNodeConstraint returns NodeConstraint:
		//    SimpleNodeConstraintAndOr;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleNodeConstraintAndOr
		public RuleCall getSimpleNodeConstraintAndOrParserRuleCall() { return cSimpleNodeConstraintAndOrParserRuleCall; }
	}
	public class SimpleNodeConstraintAndOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SimpleNodeConstraintAndOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleNodeConstraintNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndOrLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAndKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpOrKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSimpleNodeConstraintNotParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SimpleNodeConstraintAndOr returns NodeConstraint:
		//    SimpleNodeConstraintNot
		//    (({AndOr.left=current} op=("and"|"or")) right=SimpleNodeConstraintNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleNodeConstraintNot
		//(({AndOr.left=current} op=("and"|"or")) right=SimpleNodeConstraintNot)*
		public Group getGroup() { return cGroup; }
		
		//SimpleNodeConstraintNot
		public RuleCall getSimpleNodeConstraintNotParserRuleCall_0() { return cSimpleNodeConstraintNotParserRuleCall_0; }
		
		//(({AndOr.left=current} op=("and"|"or")) right=SimpleNodeConstraintNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({AndOr.left=current} op=("and"|"or"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AndOr.left=current}
		public Action getAndOrLeftAction_1_0_0() { return cAndOrLeftAction_1_0_0; }
		
		//op=("and"|"or")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("and"|"or")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"and"
		public Keyword getOpAndKeyword_1_0_1_0_0() { return cOpAndKeyword_1_0_1_0_0; }
		
		//"or"
		public Keyword getOpOrKeyword_1_0_1_0_1() { return cOpOrKeyword_1_0_1_0_1; }
		
		//right=SimpleNodeConstraintNot
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//SimpleNodeConstraintNot
		public RuleCall getRightSimpleNodeConstraintNotParserRuleCall_1_1_0() { return cRightSimpleNodeConstraintNotParserRuleCall_1_1_0; }
	}
	public class SimpleNodeConstraintNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SimpleNodeConstraintNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConstraintAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConstraintSimpleNodeConstraintAParserRuleCall_0_2_0 = (RuleCall)cConstraintAssignment_0_2.eContents().get(0);
		private final RuleCall cSimpleNodeConstraintAParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleNodeConstraintNot returns NodeConstraint:
		//    {Not} =>"not" constraint=SimpleNodeConstraintA |
		//    SimpleNodeConstraintA;
		@Override public ParserRule getRule() { return rule; }
		
		//{Not} =>"not" constraint=SimpleNodeConstraintA |
		//SimpleNodeConstraintA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Not} =>"not" constraint=SimpleNodeConstraintA
		public Group getGroup_0() { return cGroup_0; }
		
		//{Not}
		public Action getNotAction_0_0() { return cNotAction_0_0; }
		
		//=>"not"
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//constraint=SimpleNodeConstraintA
		public Assignment getConstraintAssignment_0_2() { return cConstraintAssignment_0_2; }
		
		//SimpleNodeConstraintA
		public RuleCall getConstraintSimpleNodeConstraintAParserRuleCall_0_2_0() { return cConstraintSimpleNodeConstraintAParserRuleCall_0_2_0; }
		
		//SimpleNodeConstraintA
		public RuleCall getSimpleNodeConstraintAParserRuleCall_1() { return cSimpleNodeConstraintAParserRuleCall_1; }
	}
	public class SimpleNodeConstraintAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SimpleNodeConstraintA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSimpleNodeConstraintParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cNodeHardwareConstraintAParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNodeSoftwareConstraintAParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNodeNetworkConstraintAParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleNodeConstraintA returns NodeConstraint:
		//    "(" SimpleNodeConstraint ")" |
		//    NodeHardwareConstraintA |
		//    NodeSoftwareConstraintA |
		//    NodeNetworkConstraintA;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" SimpleNodeConstraint ")" |
		//NodeHardwareConstraintA |
		//NodeSoftwareConstraintA |
		//NodeNetworkConstraintA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" SimpleNodeConstraint ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//SimpleNodeConstraint
		public RuleCall getSimpleNodeConstraintParserRuleCall_0_1() { return cSimpleNodeConstraintParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//NodeHardwareConstraintA
		public RuleCall getNodeHardwareConstraintAParserRuleCall_1() { return cNodeHardwareConstraintAParserRuleCall_1; }
		
		//NodeSoftwareConstraintA
		public RuleCall getNodeSoftwareConstraintAParserRuleCall_2() { return cNodeSoftwareConstraintAParserRuleCall_2; }
		
		//NodeNetworkConstraintA
		public RuleCall getNodeNetworkConstraintAParserRuleCall_3() { return cNodeNetworkConstraintAParserRuleCall_3; }
	}
	public class NodeHardwareConstraintAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.NodeHardwareConstraintA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCPUAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCpuKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cSpeedKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cOpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cOpEqualKeyword_0_3_0 = (Keyword)cOpAssignment_0_3.eContents().get(0);
		private final Keyword cToKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cValueAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cValueCPUFrequencyParserRuleCall_0_5_0 = (RuleCall)cValueAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCPUAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCpuKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cOpFasterKeyword_1_2_0 = (Keyword)cOpAssignment_1_2.eContents().get(0);
		private final Keyword cThanKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cValueCPUFrequencyParserRuleCall_1_4_0 = (RuleCall)cValueAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCPUAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCpuKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cOpSlowerKeyword_2_2_0 = (Keyword)cOpAssignment_2_2.eContents().get(0);
		private final Keyword cThanKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cValueAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cValueCPUFrequencyParserRuleCall_2_4_0 = (RuleCall)cValueAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCPUAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cCpuKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cSpeedKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSameasAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final Keyword cSameasOfKeyword_3_3_0 = (Keyword)cSameasAssignment_3_3.eContents().get(0);
		private final Assignment cIdAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final CrossReference cIdNodeCrossReference_3_4_0 = (CrossReference)cIdAssignment_3_4.eContents().get(0);
		private final RuleCall cIdNodeIDTerminalRuleCall_3_4_0_1 = (RuleCall)cIdNodeCrossReference_3_4_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDiskAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDiskKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cSizeKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cOpAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final Keyword cOpEqualKeyword_4_3_0 = (Keyword)cOpAssignment_4_3.eContents().get(0);
		private final Keyword cToKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cValueAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cValueDiskSizeParserRuleCall_4_5_0 = (RuleCall)cValueAssignment_4_5.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cDiskAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cDiskKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOpAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final Keyword cOpLargerKeyword_5_2_0 = (Keyword)cOpAssignment_5_2.eContents().get(0);
		private final Keyword cThanKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cValueAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cValueDiskSizeParserRuleCall_5_4_0 = (RuleCall)cValueAssignment_5_4.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cDiskAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cDiskKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOpAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final Keyword cOpSmallerKeyword_6_2_0 = (Keyword)cOpAssignment_6_2.eContents().get(0);
		private final Keyword cThanKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cValueAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cValueDiskSizeParserRuleCall_6_4_0 = (RuleCall)cValueAssignment_6_4.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cDiskAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cDiskKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cSizeKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cSameasAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final Keyword cSameasOfKeyword_7_3_0 = (Keyword)cSameasAssignment_7_3.eContents().get(0);
		private final Assignment cIdAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final CrossReference cIdNodeCrossReference_7_4_0 = (CrossReference)cIdAssignment_7_4.eContents().get(0);
		private final RuleCall cIdNodeIDTerminalRuleCall_7_4_0_1 = (RuleCall)cIdNodeCrossReference_7_4_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cRamAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cRamKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cSizeKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cOpAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final Keyword cOpEqualKeyword_8_3_0 = (Keyword)cOpAssignment_8_3.eContents().get(0);
		private final Keyword cToKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Assignment cValueAssignment_8_5 = (Assignment)cGroup_8.eContents().get(5);
		private final RuleCall cValueRamSizeParserRuleCall_8_5_0 = (RuleCall)cValueAssignment_8_5.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cRamAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cRamKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cOpAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final Keyword cOpLargerKeyword_9_2_0 = (Keyword)cOpAssignment_9_2.eContents().get(0);
		private final Keyword cThanKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cValueAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cValueRamSizeParserRuleCall_9_4_0 = (RuleCall)cValueAssignment_9_4.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cRamAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cRamKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cOpAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final Keyword cOpSmallerKeyword_10_2_0 = (Keyword)cOpAssignment_10_2.eContents().get(0);
		private final Keyword cThanKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Assignment cValueAssignment_10_4 = (Assignment)cGroup_10.eContents().get(4);
		private final RuleCall cValueRamSizeParserRuleCall_10_4_0 = (RuleCall)cValueAssignment_10_4.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cRamAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cRamKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cSizeKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cSameasAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final Keyword cSameasOfKeyword_11_3_0 = (Keyword)cSameasAssignment_11_3.eContents().get(0);
		private final Assignment cIdAssignment_11_4 = (Assignment)cGroup_11.eContents().get(4);
		private final CrossReference cIdNodeCrossReference_11_4_0 = (CrossReference)cIdAssignment_11_4.eContents().get(0);
		private final RuleCall cIdNodeIDTerminalRuleCall_11_4_0_1 = (RuleCall)cIdNodeCrossReference_11_4_0.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cFlavourAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cFlavourKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cProfileAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cProfileHardwareProfileEnumRuleCall_12_2_0 = (RuleCall)cProfileAssignment_12_2.eContents().get(0);
		
		//NodeHardwareConstraintA returns NodeConstraint:
		//    {CPU} =>'cpu' 'speed' op='equal' 'to' value=CPUFrequency |
		//    {CPU} =>'cpu' op='faster' 'than' value=CPUFrequency |
		//    {CPU} =>'cpu' op='slower' 'than' value=CPUFrequency |
		//    {CPU} =>'cpu' 'speed' sameas ?='of' id=[Node] |
		//    {Disk} =>'disk' 'size' op='equal' 'to' value=DiskSize |
		//    {Disk} =>'disk' op='larger' 'than' value=DiskSize |
		//    {Disk} =>'disk' op='smaller' 'than' value=DiskSize |
		//    {Disk} =>'disk' 'size' sameas ?='of' id=[Node] |
		//    {Ram} =>'ram' 'size' op='equal' 'to' value=RamSize |
		//    {Ram} =>'ram' op='larger' 'than' value=RamSize |
		//    {Ram} =>'ram' op='smaller' 'than' value=RamSize |
		//    {Ram} =>'ram' 'size' sameas ?='of' id=[Node] |
		//    {Flavour} =>'flavour' profile=HardwareProfile;
		@Override public ParserRule getRule() { return rule; }
		
		//{CPU} =>'cpu' 'speed' op='equal' 'to' value=CPUFrequency |
		//{CPU} =>'cpu' op='faster' 'than' value=CPUFrequency |
		//{CPU} =>'cpu' op='slower' 'than' value=CPUFrequency |
		//{CPU} =>'cpu' 'speed' sameas ?='of' id=[Node] |
		//{Disk} =>'disk' 'size' op='equal' 'to' value=DiskSize |
		//{Disk} =>'disk' op='larger' 'than' value=DiskSize |
		//{Disk} =>'disk' op='smaller' 'than' value=DiskSize |
		//{Disk} =>'disk' 'size' sameas ?='of' id=[Node] |
		//{Ram} =>'ram' 'size' op='equal' 'to' value=RamSize |
		//{Ram} =>'ram' op='larger' 'than' value=RamSize |
		//{Ram} =>'ram' op='smaller' 'than' value=RamSize |
		//{Ram} =>'ram' 'size' sameas ?='of' id=[Node] |
		//{Flavour} =>'flavour' profile=HardwareProfile
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CPU} =>'cpu' 'speed' op='equal' 'to' value=CPUFrequency
		public Group getGroup_0() { return cGroup_0; }
		
		//{CPU}
		public Action getCPUAction_0_0() { return cCPUAction_0_0; }
		
		//=>'cpu'
		public Keyword getCpuKeyword_0_1() { return cCpuKeyword_0_1; }
		
		//'speed'
		public Keyword getSpeedKeyword_0_2() { return cSpeedKeyword_0_2; }
		
		//op='equal'
		public Assignment getOpAssignment_0_3() { return cOpAssignment_0_3; }
		
		//'equal'
		public Keyword getOpEqualKeyword_0_3_0() { return cOpEqualKeyword_0_3_0; }
		
		//'to'
		public Keyword getToKeyword_0_4() { return cToKeyword_0_4; }
		
		//value=CPUFrequency
		public Assignment getValueAssignment_0_5() { return cValueAssignment_0_5; }
		
		//CPUFrequency
		public RuleCall getValueCPUFrequencyParserRuleCall_0_5_0() { return cValueCPUFrequencyParserRuleCall_0_5_0; }
		
		//{CPU} =>'cpu' op='faster' 'than' value=CPUFrequency
		public Group getGroup_1() { return cGroup_1; }
		
		//{CPU}
		public Action getCPUAction_1_0() { return cCPUAction_1_0; }
		
		//=>'cpu'
		public Keyword getCpuKeyword_1_1() { return cCpuKeyword_1_1; }
		
		//op='faster'
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }
		
		//'faster'
		public Keyword getOpFasterKeyword_1_2_0() { return cOpFasterKeyword_1_2_0; }
		
		//'than'
		public Keyword getThanKeyword_1_3() { return cThanKeyword_1_3; }
		
		//value=CPUFrequency
		public Assignment getValueAssignment_1_4() { return cValueAssignment_1_4; }
		
		//CPUFrequency
		public RuleCall getValueCPUFrequencyParserRuleCall_1_4_0() { return cValueCPUFrequencyParserRuleCall_1_4_0; }
		
		//{CPU} =>'cpu' op='slower' 'than' value=CPUFrequency
		public Group getGroup_2() { return cGroup_2; }
		
		//{CPU}
		public Action getCPUAction_2_0() { return cCPUAction_2_0; }
		
		//=>'cpu'
		public Keyword getCpuKeyword_2_1() { return cCpuKeyword_2_1; }
		
		//op='slower'
		public Assignment getOpAssignment_2_2() { return cOpAssignment_2_2; }
		
		//'slower'
		public Keyword getOpSlowerKeyword_2_2_0() { return cOpSlowerKeyword_2_2_0; }
		
		//'than'
		public Keyword getThanKeyword_2_3() { return cThanKeyword_2_3; }
		
		//value=CPUFrequency
		public Assignment getValueAssignment_2_4() { return cValueAssignment_2_4; }
		
		//CPUFrequency
		public RuleCall getValueCPUFrequencyParserRuleCall_2_4_0() { return cValueCPUFrequencyParserRuleCall_2_4_0; }
		
		//{CPU} =>'cpu' 'speed' sameas ?='of' id=[Node]
		public Group getGroup_3() { return cGroup_3; }
		
		//{CPU}
		public Action getCPUAction_3_0() { return cCPUAction_3_0; }
		
		//=>'cpu'
		public Keyword getCpuKeyword_3_1() { return cCpuKeyword_3_1; }
		
		//'speed'
		public Keyword getSpeedKeyword_3_2() { return cSpeedKeyword_3_2; }
		
		//sameas ?='of'
		public Assignment getSameasAssignment_3_3() { return cSameasAssignment_3_3; }
		
		//'of'
		public Keyword getSameasOfKeyword_3_3_0() { return cSameasOfKeyword_3_3_0; }
		
		//id=[Node]
		public Assignment getIdAssignment_3_4() { return cIdAssignment_3_4; }
		
		//[Node]
		public CrossReference getIdNodeCrossReference_3_4_0() { return cIdNodeCrossReference_3_4_0; }
		
		//ID
		public RuleCall getIdNodeIDTerminalRuleCall_3_4_0_1() { return cIdNodeIDTerminalRuleCall_3_4_0_1; }
		
		//{Disk} =>'disk' 'size' op='equal' 'to' value=DiskSize
		public Group getGroup_4() { return cGroup_4; }
		
		//{Disk}
		public Action getDiskAction_4_0() { return cDiskAction_4_0; }
		
		//=>'disk'
		public Keyword getDiskKeyword_4_1() { return cDiskKeyword_4_1; }
		
		//'size'
		public Keyword getSizeKeyword_4_2() { return cSizeKeyword_4_2; }
		
		//op='equal'
		public Assignment getOpAssignment_4_3() { return cOpAssignment_4_3; }
		
		//'equal'
		public Keyword getOpEqualKeyword_4_3_0() { return cOpEqualKeyword_4_3_0; }
		
		//'to'
		public Keyword getToKeyword_4_4() { return cToKeyword_4_4; }
		
		//value=DiskSize
		public Assignment getValueAssignment_4_5() { return cValueAssignment_4_5; }
		
		//DiskSize
		public RuleCall getValueDiskSizeParserRuleCall_4_5_0() { return cValueDiskSizeParserRuleCall_4_5_0; }
		
		//{Disk} =>'disk' op='larger' 'than' value=DiskSize
		public Group getGroup_5() { return cGroup_5; }
		
		//{Disk}
		public Action getDiskAction_5_0() { return cDiskAction_5_0; }
		
		//=>'disk'
		public Keyword getDiskKeyword_5_1() { return cDiskKeyword_5_1; }
		
		//op='larger'
		public Assignment getOpAssignment_5_2() { return cOpAssignment_5_2; }
		
		//'larger'
		public Keyword getOpLargerKeyword_5_2_0() { return cOpLargerKeyword_5_2_0; }
		
		//'than'
		public Keyword getThanKeyword_5_3() { return cThanKeyword_5_3; }
		
		//value=DiskSize
		public Assignment getValueAssignment_5_4() { return cValueAssignment_5_4; }
		
		//DiskSize
		public RuleCall getValueDiskSizeParserRuleCall_5_4_0() { return cValueDiskSizeParserRuleCall_5_4_0; }
		
		//{Disk} =>'disk' op='smaller' 'than' value=DiskSize
		public Group getGroup_6() { return cGroup_6; }
		
		//{Disk}
		public Action getDiskAction_6_0() { return cDiskAction_6_0; }
		
		//=>'disk'
		public Keyword getDiskKeyword_6_1() { return cDiskKeyword_6_1; }
		
		//op='smaller'
		public Assignment getOpAssignment_6_2() { return cOpAssignment_6_2; }
		
		//'smaller'
		public Keyword getOpSmallerKeyword_6_2_0() { return cOpSmallerKeyword_6_2_0; }
		
		//'than'
		public Keyword getThanKeyword_6_3() { return cThanKeyword_6_3; }
		
		//value=DiskSize
		public Assignment getValueAssignment_6_4() { return cValueAssignment_6_4; }
		
		//DiskSize
		public RuleCall getValueDiskSizeParserRuleCall_6_4_0() { return cValueDiskSizeParserRuleCall_6_4_0; }
		
		//{Disk} =>'disk' 'size' sameas ?='of' id=[Node]
		public Group getGroup_7() { return cGroup_7; }
		
		//{Disk}
		public Action getDiskAction_7_0() { return cDiskAction_7_0; }
		
		//=>'disk'
		public Keyword getDiskKeyword_7_1() { return cDiskKeyword_7_1; }
		
		//'size'
		public Keyword getSizeKeyword_7_2() { return cSizeKeyword_7_2; }
		
		//sameas ?='of'
		public Assignment getSameasAssignment_7_3() { return cSameasAssignment_7_3; }
		
		//'of'
		public Keyword getSameasOfKeyword_7_3_0() { return cSameasOfKeyword_7_3_0; }
		
		//id=[Node]
		public Assignment getIdAssignment_7_4() { return cIdAssignment_7_4; }
		
		//[Node]
		public CrossReference getIdNodeCrossReference_7_4_0() { return cIdNodeCrossReference_7_4_0; }
		
		//ID
		public RuleCall getIdNodeIDTerminalRuleCall_7_4_0_1() { return cIdNodeIDTerminalRuleCall_7_4_0_1; }
		
		//{Ram} =>'ram' 'size' op='equal' 'to' value=RamSize
		public Group getGroup_8() { return cGroup_8; }
		
		//{Ram}
		public Action getRamAction_8_0() { return cRamAction_8_0; }
		
		//=>'ram'
		public Keyword getRamKeyword_8_1() { return cRamKeyword_8_1; }
		
		//'size'
		public Keyword getSizeKeyword_8_2() { return cSizeKeyword_8_2; }
		
		//op='equal'
		public Assignment getOpAssignment_8_3() { return cOpAssignment_8_3; }
		
		//'equal'
		public Keyword getOpEqualKeyword_8_3_0() { return cOpEqualKeyword_8_3_0; }
		
		//'to'
		public Keyword getToKeyword_8_4() { return cToKeyword_8_4; }
		
		//value=RamSize
		public Assignment getValueAssignment_8_5() { return cValueAssignment_8_5; }
		
		//RamSize
		public RuleCall getValueRamSizeParserRuleCall_8_5_0() { return cValueRamSizeParserRuleCall_8_5_0; }
		
		//{Ram} =>'ram' op='larger' 'than' value=RamSize
		public Group getGroup_9() { return cGroup_9; }
		
		//{Ram}
		public Action getRamAction_9_0() { return cRamAction_9_0; }
		
		//=>'ram'
		public Keyword getRamKeyword_9_1() { return cRamKeyword_9_1; }
		
		//op='larger'
		public Assignment getOpAssignment_9_2() { return cOpAssignment_9_2; }
		
		//'larger'
		public Keyword getOpLargerKeyword_9_2_0() { return cOpLargerKeyword_9_2_0; }
		
		//'than'
		public Keyword getThanKeyword_9_3() { return cThanKeyword_9_3; }
		
		//value=RamSize
		public Assignment getValueAssignment_9_4() { return cValueAssignment_9_4; }
		
		//RamSize
		public RuleCall getValueRamSizeParserRuleCall_9_4_0() { return cValueRamSizeParserRuleCall_9_4_0; }
		
		//{Ram} =>'ram' op='smaller' 'than' value=RamSize
		public Group getGroup_10() { return cGroup_10; }
		
		//{Ram}
		public Action getRamAction_10_0() { return cRamAction_10_0; }
		
		//=>'ram'
		public Keyword getRamKeyword_10_1() { return cRamKeyword_10_1; }
		
		//op='smaller'
		public Assignment getOpAssignment_10_2() { return cOpAssignment_10_2; }
		
		//'smaller'
		public Keyword getOpSmallerKeyword_10_2_0() { return cOpSmallerKeyword_10_2_0; }
		
		//'than'
		public Keyword getThanKeyword_10_3() { return cThanKeyword_10_3; }
		
		//value=RamSize
		public Assignment getValueAssignment_10_4() { return cValueAssignment_10_4; }
		
		//RamSize
		public RuleCall getValueRamSizeParserRuleCall_10_4_0() { return cValueRamSizeParserRuleCall_10_4_0; }
		
		//{Ram} =>'ram' 'size' sameas ?='of' id=[Node]
		public Group getGroup_11() { return cGroup_11; }
		
		//{Ram}
		public Action getRamAction_11_0() { return cRamAction_11_0; }
		
		//=>'ram'
		public Keyword getRamKeyword_11_1() { return cRamKeyword_11_1; }
		
		//'size'
		public Keyword getSizeKeyword_11_2() { return cSizeKeyword_11_2; }
		
		//sameas ?='of'
		public Assignment getSameasAssignment_11_3() { return cSameasAssignment_11_3; }
		
		//'of'
		public Keyword getSameasOfKeyword_11_3_0() { return cSameasOfKeyword_11_3_0; }
		
		//id=[Node]
		public Assignment getIdAssignment_11_4() { return cIdAssignment_11_4; }
		
		//[Node]
		public CrossReference getIdNodeCrossReference_11_4_0() { return cIdNodeCrossReference_11_4_0; }
		
		//ID
		public RuleCall getIdNodeIDTerminalRuleCall_11_4_0_1() { return cIdNodeIDTerminalRuleCall_11_4_0_1; }
		
		//{Flavour} =>'flavour' profile=HardwareProfile
		public Group getGroup_12() { return cGroup_12; }
		
		//{Flavour}
		public Action getFlavourAction_12_0() { return cFlavourAction_12_0; }
		
		//=>'flavour'
		public Keyword getFlavourKeyword_12_1() { return cFlavourKeyword_12_1; }
		
		//profile=HardwareProfile
		public Assignment getProfileAssignment_12_2() { return cProfileAssignment_12_2; }
		
		//HardwareProfile
		public RuleCall getProfileHardwareProfileEnumRuleCall_12_2_0() { return cProfileHardwareProfileEnumRuleCall_12_2_0; }
	}
	public class NodeNetworkConstraintAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.NodeNetworkConstraintA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIPAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIpKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cAddressKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cOpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cOpEqualKeyword_0_3_0 = (Keyword)cOpAssignment_0_3.eContents().get(0);
		private final Keyword cToKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cIpAddressAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cIpAddressIPAddressParserRuleCall_0_5_0 = (RuleCall)cIpAddressAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIPAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIpKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cAddressKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cOpInKeyword_1_3_0 = (Keyword)cOpAssignment_1_3.eContents().get(0);
		private final Keyword cRangeKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cIpRangeAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cIpRangeIPRangeAParserRuleCall_1_5_0 = (RuleCall)cIpRangeAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIPAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cIpKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cAddressKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cIsKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cOpAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final Keyword cOpConnectedKeyword_2_4_0 = (Keyword)cOpAssignment_2_4.eContents().get(0);
		private final Keyword cToKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cNodeAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final CrossReference cNodeNodeCrossReference_2_6_0 = (CrossReference)cNodeAssignment_2_6.eContents().get(0);
		private final RuleCall cNodeNodeIDTerminalRuleCall_2_6_0_1 = (RuleCall)cNodeNodeCrossReference_2_6_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cGatewayAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cGatewayKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cIsKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cGatewayIPAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cGatewayIPIPAddressParserRuleCall_3_3_0 = (RuleCall)cGatewayIPAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDNSAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDNSKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cIsKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cDNSIPAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cDNSIPIPAddressParserRuleCall_4_3_0 = (RuleCall)cDNSIPAssignment_4_3.eContents().get(0);
		
		//// 节点网络约束
		//NodeNetworkConstraintA returns NodeConstraint:
		//    {IP} =>'ip' 'address' op='equal' 'to' ipAddress=IPAddress |
		//    {IP} =>'ip' 'address' op='in' 'range' ipRange=IPRangeA |
		//    {IP} =>'ip' 'address' 'is' op='connected' 'to' node=[Node]|
		//    {Gateway} =>"gateway" 'is' gatewayIP = IPAddress|
		//    {DNS} => 'DNS' 'is' DNSIP = IPAddress;
		@Override public ParserRule getRule() { return rule; }
		
		//{IP} =>'ip' 'address' op='equal' 'to' ipAddress=IPAddress |
		//{IP} =>'ip' 'address' op='in' 'range' ipRange=IPRangeA |
		//{IP} =>'ip' 'address' 'is' op='connected' 'to' node=[Node]|
		//{Gateway} =>"gateway" 'is' gatewayIP = IPAddress|
		//{DNS} => 'DNS' 'is' DNSIP = IPAddress
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IP} =>'ip' 'address' op='equal' 'to' ipAddress=IPAddress
		public Group getGroup_0() { return cGroup_0; }
		
		//{IP}
		public Action getIPAction_0_0() { return cIPAction_0_0; }
		
		//=>'ip'
		public Keyword getIpKeyword_0_1() { return cIpKeyword_0_1; }
		
		//'address'
		public Keyword getAddressKeyword_0_2() { return cAddressKeyword_0_2; }
		
		//op='equal'
		public Assignment getOpAssignment_0_3() { return cOpAssignment_0_3; }
		
		//'equal'
		public Keyword getOpEqualKeyword_0_3_0() { return cOpEqualKeyword_0_3_0; }
		
		//'to'
		public Keyword getToKeyword_0_4() { return cToKeyword_0_4; }
		
		//ipAddress=IPAddress
		public Assignment getIpAddressAssignment_0_5() { return cIpAddressAssignment_0_5; }
		
		//IPAddress
		public RuleCall getIpAddressIPAddressParserRuleCall_0_5_0() { return cIpAddressIPAddressParserRuleCall_0_5_0; }
		
		//{IP} =>'ip' 'address' op='in' 'range' ipRange=IPRangeA
		public Group getGroup_1() { return cGroup_1; }
		
		//{IP}
		public Action getIPAction_1_0() { return cIPAction_1_0; }
		
		//=>'ip'
		public Keyword getIpKeyword_1_1() { return cIpKeyword_1_1; }
		
		//'address'
		public Keyword getAddressKeyword_1_2() { return cAddressKeyword_1_2; }
		
		//op='in'
		public Assignment getOpAssignment_1_3() { return cOpAssignment_1_3; }
		
		//'in'
		public Keyword getOpInKeyword_1_3_0() { return cOpInKeyword_1_3_0; }
		
		//'range'
		public Keyword getRangeKeyword_1_4() { return cRangeKeyword_1_4; }
		
		//ipRange=IPRangeA
		public Assignment getIpRangeAssignment_1_5() { return cIpRangeAssignment_1_5; }
		
		//IPRangeA
		public RuleCall getIpRangeIPRangeAParserRuleCall_1_5_0() { return cIpRangeIPRangeAParserRuleCall_1_5_0; }
		
		//{IP} =>'ip' 'address' 'is' op='connected' 'to' node=[Node]
		public Group getGroup_2() { return cGroup_2; }
		
		//{IP}
		public Action getIPAction_2_0() { return cIPAction_2_0; }
		
		//=>'ip'
		public Keyword getIpKeyword_2_1() { return cIpKeyword_2_1; }
		
		//'address'
		public Keyword getAddressKeyword_2_2() { return cAddressKeyword_2_2; }
		
		//'is'
		public Keyword getIsKeyword_2_3() { return cIsKeyword_2_3; }
		
		//op='connected'
		public Assignment getOpAssignment_2_4() { return cOpAssignment_2_4; }
		
		//'connected'
		public Keyword getOpConnectedKeyword_2_4_0() { return cOpConnectedKeyword_2_4_0; }
		
		//'to'
		public Keyword getToKeyword_2_5() { return cToKeyword_2_5; }
		
		//node=[Node]
		public Assignment getNodeAssignment_2_6() { return cNodeAssignment_2_6; }
		
		//[Node]
		public CrossReference getNodeNodeCrossReference_2_6_0() { return cNodeNodeCrossReference_2_6_0; }
		
		//ID
		public RuleCall getNodeNodeIDTerminalRuleCall_2_6_0_1() { return cNodeNodeIDTerminalRuleCall_2_6_0_1; }
		
		//{Gateway} =>"gateway" 'is' gatewayIP = IPAddress
		public Group getGroup_3() { return cGroup_3; }
		
		//{Gateway}
		public Action getGatewayAction_3_0() { return cGatewayAction_3_0; }
		
		//=>"gateway"
		public Keyword getGatewayKeyword_3_1() { return cGatewayKeyword_3_1; }
		
		//'is'
		public Keyword getIsKeyword_3_2() { return cIsKeyword_3_2; }
		
		//gatewayIP = IPAddress
		public Assignment getGatewayIPAssignment_3_3() { return cGatewayIPAssignment_3_3; }
		
		//IPAddress
		public RuleCall getGatewayIPIPAddressParserRuleCall_3_3_0() { return cGatewayIPIPAddressParserRuleCall_3_3_0; }
		
		//{DNS} => 'DNS' 'is' DNSIP = IPAddress
		public Group getGroup_4() { return cGroup_4; }
		
		//{DNS}
		public Action getDNSAction_4_0() { return cDNSAction_4_0; }
		
		//=> 'DNS'
		public Keyword getDNSKeyword_4_1() { return cDNSKeyword_4_1; }
		
		//'is'
		public Keyword getIsKeyword_4_2() { return cIsKeyword_4_2; }
		
		//DNSIP = IPAddress
		public Assignment getDNSIPAssignment_4_3() { return cDNSIPAssignment_4_3; }
		
		//IPAddress
		public RuleCall getDNSIPIPAddressParserRuleCall_4_3_0() { return cDNSIPIPAddressParserRuleCall_4_3_0; }
	}
	public class NodeSoftwareConstraintAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.NodeSoftwareConstraintA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNodeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cOSAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Keyword cOSKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cIsKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cVersionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cVersionOSVersionEParserRuleCall_0_4_0 = (RuleCall)cVersionAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNodeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cOSKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Action cOSFamilyAction_1_2 = (Action)cGroup_1.eContents().get(2);
		private final Keyword cFamilyKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cIsKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cFamilyAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cFamilyOSFamilyEParserRuleCall_1_5_0 = (RuleCall)cFamilyAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cMountsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cSoftwareKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSoftwareAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSoftwareSoftwareInstallationParserRuleCall_2_2_0 = (RuleCall)cSoftwareAssignment_2_2.eContents().get(0);
		
		//NodeSoftwareConstraintA returns NodeConstraint:
		//    'node' {OS} =>'OS' 'is' version=OSVersionE |
		//    'node' 'OS' {OSFamily} =>'family' 'is' family=OSFamilyE|
		//    'mounts' 'software' software=SoftwareInstallation;
		@Override public ParserRule getRule() { return rule; }
		
		//'node' {OS} =>'OS' 'is' version=OSVersionE |
		//'node' 'OS' {OSFamily} =>'family' 'is' family=OSFamilyE|
		//'mounts' 'software' software=SoftwareInstallation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'node' {OS} =>'OS' 'is' version=OSVersionE
		public Group getGroup_0() { return cGroup_0; }
		
		//'node'
		public Keyword getNodeKeyword_0_0() { return cNodeKeyword_0_0; }
		
		//{OS}
		public Action getOSAction_0_1() { return cOSAction_0_1; }
		
		//=>'OS'
		public Keyword getOSKeyword_0_2() { return cOSKeyword_0_2; }
		
		//'is'
		public Keyword getIsKeyword_0_3() { return cIsKeyword_0_3; }
		
		//version=OSVersionE
		public Assignment getVersionAssignment_0_4() { return cVersionAssignment_0_4; }
		
		//OSVersionE
		public RuleCall getVersionOSVersionEParserRuleCall_0_4_0() { return cVersionOSVersionEParserRuleCall_0_4_0; }
		
		//'node' 'OS' {OSFamily} =>'family' 'is' family=OSFamilyE
		public Group getGroup_1() { return cGroup_1; }
		
		//'node'
		public Keyword getNodeKeyword_1_0() { return cNodeKeyword_1_0; }
		
		//'OS'
		public Keyword getOSKeyword_1_1() { return cOSKeyword_1_1; }
		
		//{OSFamily}
		public Action getOSFamilyAction_1_2() { return cOSFamilyAction_1_2; }
		
		//=>'family'
		public Keyword getFamilyKeyword_1_3() { return cFamilyKeyword_1_3; }
		
		//'is'
		public Keyword getIsKeyword_1_4() { return cIsKeyword_1_4; }
		
		//family=OSFamilyE
		public Assignment getFamilyAssignment_1_5() { return cFamilyAssignment_1_5; }
		
		//OSFamilyE
		public RuleCall getFamilyOSFamilyEParserRuleCall_1_5_0() { return cFamilyOSFamilyEParserRuleCall_1_5_0; }
		
		//'mounts' 'software' software=SoftwareInstallation
		public Group getGroup_2() { return cGroup_2; }
		
		//'mounts'
		public Keyword getMountsKeyword_2_0() { return cMountsKeyword_2_0; }
		
		//'software'
		public Keyword getSoftwareKeyword_2_1() { return cSoftwareKeyword_2_1; }
		
		//software=SoftwareInstallation
		public Assignment getSoftwareAssignment_2_2() { return cSoftwareAssignment_2_2; }
		
		//SoftwareInstallation
		public RuleCall getSoftwareSoftwareInstallationParserRuleCall_2_2_0() { return cSoftwareSoftwareInstallationParserRuleCall_2_2_0; }
	}
	public class SoftwareInstallationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SoftwareInstallation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSoftwareIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSoftwareIDIDTerminalRuleCall_0_0 = (RuleCall)cSoftwareIDAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVersionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVersionVersionNumberParserRuleCall_1_1_0 = (RuleCall)cVersionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDependenciesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDependenciesSoftwareDependencyParserRuleCall_2_1_0 = (RuleCall)cDependenciesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDependenciesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDependenciesSoftwareDependencyParserRuleCall_2_2_1_0 = (RuleCall)cDependenciesAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConfigKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConfigAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConfigConfigOptionsParserRuleCall_3_1_0 = (RuleCall)cConfigAssignment_3_1.eContents().get(0);
		
		////    'suffers' 'from' vulnID=VulnerabilityID;
		//////
		////VulnerabilityID:
		////    STRING;
		//SoftwareInstallation:
		//    softwareID=ID ('version' version=VersionNumber)?
		//    ('with' dependencies+=SoftwareDependency (',' dependencies+=SoftwareDependency)*)?
		//    ('config' config=ConfigOptions)?;
		@Override public ParserRule getRule() { return rule; }
		
		//softwareID=ID ('version' version=VersionNumber)?
		//('with' dependencies+=SoftwareDependency (',' dependencies+=SoftwareDependency)*)?
		//('config' config=ConfigOptions)?
		public Group getGroup() { return cGroup; }
		
		//softwareID=ID
		public Assignment getSoftwareIDAssignment_0() { return cSoftwareIDAssignment_0; }
		
		//ID
		public RuleCall getSoftwareIDIDTerminalRuleCall_0_0() { return cSoftwareIDIDTerminalRuleCall_0_0; }
		
		//('version' version=VersionNumber)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'version'
		public Keyword getVersionKeyword_1_0() { return cVersionKeyword_1_0; }
		
		//version=VersionNumber
		public Assignment getVersionAssignment_1_1() { return cVersionAssignment_1_1; }
		
		//VersionNumber
		public RuleCall getVersionVersionNumberParserRuleCall_1_1_0() { return cVersionVersionNumberParserRuleCall_1_1_0; }
		
		//('with' dependencies+=SoftwareDependency (',' dependencies+=SoftwareDependency)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }
		
		//dependencies+=SoftwareDependency
		public Assignment getDependenciesAssignment_2_1() { return cDependenciesAssignment_2_1; }
		
		//SoftwareDependency
		public RuleCall getDependenciesSoftwareDependencyParserRuleCall_2_1_0() { return cDependenciesSoftwareDependencyParserRuleCall_2_1_0; }
		
		//(',' dependencies+=SoftwareDependency)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//dependencies+=SoftwareDependency
		public Assignment getDependenciesAssignment_2_2_1() { return cDependenciesAssignment_2_2_1; }
		
		//SoftwareDependency
		public RuleCall getDependenciesSoftwareDependencyParserRuleCall_2_2_1_0() { return cDependenciesSoftwareDependencyParserRuleCall_2_2_1_0; }
		
		//('config' config=ConfigOptions)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'config'
		public Keyword getConfigKeyword_3_0() { return cConfigKeyword_3_0; }
		
		//config=ConfigOptions
		public Assignment getConfigAssignment_3_1() { return cConfigAssignment_3_1; }
		
		//ConfigOptions
		public RuleCall getConfigConfigOptionsParserRuleCall_3_1_0() { return cConfigConfigOptionsParserRuleCall_3_1_0; }
	}
	public class VersionNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.VersionNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//VersionNumber:
		//    INT ('.' INT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)*
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class SoftwareDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SoftwareDependency");
		private final Assignment cDependencyIDAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDependencyIDIDTerminalRuleCall_0 = (RuleCall)cDependencyIDAssignment.eContents().get(0);
		
		//SoftwareDependency:
		//    dependencyID=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//dependencyID=ID
		public Assignment getDependencyIDAssignment() { return cDependencyIDAssignment; }
		
		//ID
		public RuleCall getDependencyIDIDTerminalRuleCall_0() { return cDependencyIDIDTerminalRuleCall_0; }
	}
	public class ConfigOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.ConfigOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfigPairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigPairsConfigPairParserRuleCall_1_0 = (RuleCall)cConfigPairsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConfigPairsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConfigPairsConfigPairParserRuleCall_2_1_0 = (RuleCall)cConfigPairsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConfigOptions:
		//    '{' configPairs+=ConfigPair (',' configPairs+=ConfigPair)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' configPairs+=ConfigPair (',' configPairs+=ConfigPair)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//configPairs+=ConfigPair
		public Assignment getConfigPairsAssignment_1() { return cConfigPairsAssignment_1; }
		
		//ConfigPair
		public RuleCall getConfigPairsConfigPairParserRuleCall_1_0() { return cConfigPairsConfigPairParserRuleCall_1_0; }
		
		//(',' configPairs+=ConfigPair)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//configPairs+=ConfigPair
		public Assignment getConfigPairsAssignment_2_1() { return cConfigPairsAssignment_2_1; }
		
		//ConfigPair
		public RuleCall getConfigPairsConfigPairParserRuleCall_2_1_0() { return cConfigPairsConfigPairParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ConfigPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.ConfigPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ConfigPair:
		//    key=ID '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class NetworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.Network");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNetworkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsNetworkConstraintParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Define IP as a part of your Node or Network
		////IP:
		////    'node' 'has' 'IP' 'address' ipAddress=IPAddress
		////    ('op' op=IPOperation)?
		////    ('id' id=[Node])?;
		////
		//Network:
		//    'network' name=ID '{' constraints += NetworkConstraint* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'network' name=ID '{' constraints += NetworkConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//'network'
		public Keyword getNetworkKeyword_0() { return cNetworkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//constraints += NetworkConstraint*
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//NetworkConstraint
		public RuleCall getConstraintsNetworkConstraintParserRuleCall_3_0() { return cConstraintsNetworkConstraintParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NetworkConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.NetworkConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cGuardedNetworkConstraintParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleNetworkConstraintParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//NetworkConstraint:
		//    GuardedNetworkConstraint ';'|
		//    SimpleNetworkConstraint ';';
		@Override public ParserRule getRule() { return rule; }
		
		//GuardedNetworkConstraint ';'|
		//SimpleNetworkConstraint ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GuardedNetworkConstraint ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//GuardedNetworkConstraint
		public RuleCall getGuardedNetworkConstraintParserRuleCall_0_0() { return cGuardedNetworkConstraintParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//SimpleNetworkConstraint ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleNetworkConstraint
		public RuleCall getSimpleNetworkConstraintParserRuleCall_1_0() { return cSimpleNetworkConstraintParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class GuardedNetworkConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.GuardedNetworkConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNetworktriggerconstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNetworktriggerconstraintUpdateTriggerConstraintParserRuleCall_1_0 = (RuleCall)cNetworktriggerconstraintAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNetworkconstraintAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNetworkconstraintSimpleNetworkConstraintParserRuleCall_4_0 = (RuleCall)cNetworkconstraintAssignment_4.eContents().get(0);
		
		//GuardedNetworkConstraint returns NetworkConstraint:
		//    '[' networktriggerconstraint=UpdateTriggerConstraint ']' '->' networkconstraint=SimpleNetworkConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' networktriggerconstraint=UpdateTriggerConstraint ']' '->' networkconstraint=SimpleNetworkConstraint
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//networktriggerconstraint=UpdateTriggerConstraint
		public Assignment getNetworktriggerconstraintAssignment_1() { return cNetworktriggerconstraintAssignment_1; }
		
		//UpdateTriggerConstraint
		public RuleCall getNetworktriggerconstraintUpdateTriggerConstraintParserRuleCall_1_0() { return cNetworktriggerconstraintUpdateTriggerConstraintParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//networkconstraint=SimpleNetworkConstraint
		public Assignment getNetworkconstraintAssignment_4() { return cNetworkconstraintAssignment_4; }
		
		//SimpleNetworkConstraint
		public RuleCall getNetworkconstraintSimpleNetworkConstraintParserRuleCall_4_0() { return cNetworkconstraintSimpleNetworkConstraintParserRuleCall_4_0; }
	}
	public class SimpleNetworkConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SimpleNetworkConstraint");
		private final RuleCall cSimpleNetworkConstraintAndOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleNetworkConstraint returns NetworkConstraint:
		//    SimpleNetworkConstraintAndOr;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleNetworkConstraintAndOr
		public RuleCall getSimpleNetworkConstraintAndOrParserRuleCall() { return cSimpleNetworkConstraintAndOrParserRuleCall; }
	}
	public class SimpleNetworkConstraintAndOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SimpleNetworkConstraintAndOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleNetworkConstraintNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndOrLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAndKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpOrKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSimpleNetworkConstraintNotParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SimpleNetworkConstraintAndOr returns NetworkConstraint:
		//    SimpleNetworkConstraintNot
		//    (({AndOr.left=current} op=("and"|"or")) right=SimpleNetworkConstraintNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleNetworkConstraintNot
		//(({AndOr.left=current} op=("and"|"or")) right=SimpleNetworkConstraintNot)*
		public Group getGroup() { return cGroup; }
		
		//SimpleNetworkConstraintNot
		public RuleCall getSimpleNetworkConstraintNotParserRuleCall_0() { return cSimpleNetworkConstraintNotParserRuleCall_0; }
		
		//(({AndOr.left=current} op=("and"|"or")) right=SimpleNetworkConstraintNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({AndOr.left=current} op=("and"|"or"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AndOr.left=current}
		public Action getAndOrLeftAction_1_0_0() { return cAndOrLeftAction_1_0_0; }
		
		//op=("and"|"or")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("and"|"or")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"and"
		public Keyword getOpAndKeyword_1_0_1_0_0() { return cOpAndKeyword_1_0_1_0_0; }
		
		//"or"
		public Keyword getOpOrKeyword_1_0_1_0_1() { return cOpOrKeyword_1_0_1_0_1; }
		
		//right=SimpleNetworkConstraintNot
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//SimpleNetworkConstraintNot
		public RuleCall getRightSimpleNetworkConstraintNotParserRuleCall_1_1_0() { return cRightSimpleNetworkConstraintNotParserRuleCall_1_1_0; }
	}
	public class SimpleNetworkConstraintNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SimpleNetworkConstraintNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConstraintAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConstraintSimpleNetworkConstraintAParserRuleCall_0_2_0 = (RuleCall)cConstraintAssignment_0_2.eContents().get(0);
		private final RuleCall cSimpleNetworkConstraintAParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleNetworkConstraintNot returns NetworkConstraint:
		//    {Not} =>"not" constraint=SimpleNetworkConstraintA |
		//    SimpleNetworkConstraintA;
		@Override public ParserRule getRule() { return rule; }
		
		//{Not} =>"not" constraint=SimpleNetworkConstraintA |
		//SimpleNetworkConstraintA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Not} =>"not" constraint=SimpleNetworkConstraintA
		public Group getGroup_0() { return cGroup_0; }
		
		//{Not}
		public Action getNotAction_0_0() { return cNotAction_0_0; }
		
		//=>"not"
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//constraint=SimpleNetworkConstraintA
		public Assignment getConstraintAssignment_0_2() { return cConstraintAssignment_0_2; }
		
		//SimpleNetworkConstraintA
		public RuleCall getConstraintSimpleNetworkConstraintAParserRuleCall_0_2_0() { return cConstraintSimpleNetworkConstraintAParserRuleCall_0_2_0; }
		
		//SimpleNetworkConstraintA
		public RuleCall getSimpleNetworkConstraintAParserRuleCall_1() { return cSimpleNetworkConstraintAParserRuleCall_1; }
	}
	public class SimpleNetworkConstraintAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.SimpleNetworkConstraintA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSimpleNetworkConstraintParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cNetworkGatewayConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNetworkParticipantsConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleNetworkConstraintA returns NetworkConstraint:
		//    "(" SimpleNetworkConstraint ")" |
		//    NetworkGatewayConstraint |
		//    NetworkParticipantsConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" SimpleNetworkConstraint ")" |
		//NetworkGatewayConstraint |
		//NetworkParticipantsConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" SimpleNetworkConstraint ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//SimpleNetworkConstraint
		public RuleCall getSimpleNetworkConstraintParserRuleCall_0_1() { return cSimpleNetworkConstraintParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//NetworkGatewayConstraint
		public RuleCall getNetworkGatewayConstraintParserRuleCall_1() { return cNetworkGatewayConstraintParserRuleCall_1; }
		
		//NetworkParticipantsConstraint
		public RuleCall getNetworkParticipantsConstraintParserRuleCall_2() { return cNetworkParticipantsConstraintParserRuleCall_2; }
	}
	public class NetworkGatewayConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.NetworkGatewayConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIPRangeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAddressesKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cRangeKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cIsKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRangeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRangeIPRangeAParserRuleCall_0_4_0 = (RuleCall)cRangeAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGatewayAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGatewayKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cHasKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cDirectKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cAccessKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cToKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cTheKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cInternetAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final Keyword cInternetInternetKeyword_1_7_0 = (Keyword)cInternetAssignment_1_7.eContents().get(0);
		
		//NetworkGatewayConstraint returns NetworkConstraint:
		//    {IPRange} =>"addresses" "range" "is" range=IPRangeA |
		//    {Gateway} =>"gateway" "has" "direct" "access" "to" "the" internet ?="Internet";
		@Override public ParserRule getRule() { return rule; }
		
		//{IPRange} =>"addresses" "range" "is" range=IPRangeA |
		//{Gateway} =>"gateway" "has" "direct" "access" "to" "the" internet ?="Internet"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IPRange} =>"addresses" "range" "is" range=IPRangeA
		public Group getGroup_0() { return cGroup_0; }
		
		//{IPRange}
		public Action getIPRangeAction_0_0() { return cIPRangeAction_0_0; }
		
		//=>"addresses"
		public Keyword getAddressesKeyword_0_1() { return cAddressesKeyword_0_1; }
		
		//"range"
		public Keyword getRangeKeyword_0_2() { return cRangeKeyword_0_2; }
		
		//"is"
		public Keyword getIsKeyword_0_3() { return cIsKeyword_0_3; }
		
		//range=IPRangeA
		public Assignment getRangeAssignment_0_4() { return cRangeAssignment_0_4; }
		
		//IPRangeA
		public RuleCall getRangeIPRangeAParserRuleCall_0_4_0() { return cRangeIPRangeAParserRuleCall_0_4_0; }
		
		//{Gateway} =>"gateway" "has" "direct" "access" "to" "the" internet ?="Internet"
		public Group getGroup_1() { return cGroup_1; }
		
		//{Gateway}
		public Action getGatewayAction_1_0() { return cGatewayAction_1_0; }
		
		//=>"gateway"
		public Keyword getGatewayKeyword_1_1() { return cGatewayKeyword_1_1; }
		
		//"has"
		public Keyword getHasKeyword_1_2() { return cHasKeyword_1_2; }
		
		//"direct"
		public Keyword getDirectKeyword_1_3() { return cDirectKeyword_1_3; }
		
		//"access"
		public Keyword getAccessKeyword_1_4() { return cAccessKeyword_1_4; }
		
		//"to"
		public Keyword getToKeyword_1_5() { return cToKeyword_1_5; }
		
		//"the"
		public Keyword getTheKeyword_1_6() { return cTheKeyword_1_6; }
		
		//internet ?="Internet"
		public Assignment getInternetAssignment_1_7() { return cInternetAssignment_1_7; }
		
		//"Internet"
		public Keyword getInternetInternetKeyword_1_7_0() { return cInternetInternetKeyword_1_7_0; }
	}
	public class NetworkParticipantsConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.NetworkParticipantsConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNodeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cIdNodeCrossReference_0_1_0 = (CrossReference)cIdAssignment_0_1.eContents().get(0);
		private final RuleCall cIdNodeIDTerminalRuleCall_0_1_0_1 = (RuleCall)cIdNodeCrossReference_0_1_0.eContents().get(1);
		private final Keyword cIsKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cOpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cOpConnectedKeyword_0_3_0 = (Keyword)cOpAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNodeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cIdNodeCrossReference_1_1_0 = (CrossReference)cIdAssignment_1_1.eContents().get(0);
		private final RuleCall cIdNodeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cIdNodeCrossReference_1_1_0.eContents().get(1);
		private final Keyword cHasKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cOpIPKeyword_1_3_0 = (Keyword)cOpAssignment_1_3.eContents().get(0);
		private final Assignment cIpAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cIpIPAddressParserRuleCall_1_4_0 = (RuleCall)cIpAssignment_1_4.eContents().get(0);
		
		//NetworkParticipantsConstraint returns NetworkConstraint:
		//    "node" id=[Node] "is" op="connected" |
		//    "node" id=[Node] "has" op="IP" ip=IPAddress;
		@Override public ParserRule getRule() { return rule; }
		
		//"node" id=[Node] "is" op="connected" |
		//"node" id=[Node] "has" op="IP" ip=IPAddress
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"node" id=[Node] "is" op="connected"
		public Group getGroup_0() { return cGroup_0; }
		
		//"node"
		public Keyword getNodeKeyword_0_0() { return cNodeKeyword_0_0; }
		
		//id=[Node]
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }
		
		//[Node]
		public CrossReference getIdNodeCrossReference_0_1_0() { return cIdNodeCrossReference_0_1_0; }
		
		//ID
		public RuleCall getIdNodeIDTerminalRuleCall_0_1_0_1() { return cIdNodeIDTerminalRuleCall_0_1_0_1; }
		
		//"is"
		public Keyword getIsKeyword_0_2() { return cIsKeyword_0_2; }
		
		//op="connected"
		public Assignment getOpAssignment_0_3() { return cOpAssignment_0_3; }
		
		//"connected"
		public Keyword getOpConnectedKeyword_0_3_0() { return cOpConnectedKeyword_0_3_0; }
		
		//"node" id=[Node] "has" op="IP" ip=IPAddress
		public Group getGroup_1() { return cGroup_1; }
		
		//"node"
		public Keyword getNodeKeyword_1_0() { return cNodeKeyword_1_0; }
		
		//id=[Node]
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }
		
		//[Node]
		public CrossReference getIdNodeCrossReference_1_1_0() { return cIdNodeCrossReference_1_1_0; }
		
		//ID
		public RuleCall getIdNodeIDTerminalRuleCall_1_1_0_1() { return cIdNodeIDTerminalRuleCall_1_1_0_1; }
		
		//"has"
		public Keyword getHasKeyword_1_2() { return cHasKeyword_1_2; }
		
		//op="IP"
		public Assignment getOpAssignment_1_3() { return cOpAssignment_1_3; }
		
		//"IP"
		public Keyword getOpIPKeyword_1_3_0() { return cOpIPKeyword_1_3_0; }
		
		//ip=IPAddress
		public Assignment getIpAssignment_1_4() { return cIpAssignment_1_4; }
		
		//IPAddress
		public RuleCall getIpIPAddressParserRuleCall_1_4_0() { return cIpIPAddressParserRuleCall_1_4_0; }
	}
	public class UpdateTriggerConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.UpdateTriggerConstraint");
		private final RuleCall cUpdateTriggerConstraintAndOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UpdateTriggerConstraint:
		//    UpdateTriggerConstraintAndOr;
		@Override public ParserRule getRule() { return rule; }
		
		//UpdateTriggerConstraintAndOr
		public RuleCall getUpdateTriggerConstraintAndOrParserRuleCall() { return cUpdateTriggerConstraintAndOrParserRuleCall; }
	}
	public class UpdateTriggerConstraintAndOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.UpdateTriggerConstraintAndOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUpdateTriggerConstraintNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndOrLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAndKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpOrKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUpdateTriggerConstraintNotParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//UpdateTriggerConstraintAndOr returns UpdateTriggerConstraint:
		//     UpdateTriggerConstraintNot
		//     (({AndOr.left=current} op=("and"|"or")) right=UpdateTriggerConstraintNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UpdateTriggerConstraintNot
		//(({AndOr.left=current} op=("and"|"or")) right=UpdateTriggerConstraintNot)*
		public Group getGroup() { return cGroup; }
		
		//UpdateTriggerConstraintNot
		public RuleCall getUpdateTriggerConstraintNotParserRuleCall_0() { return cUpdateTriggerConstraintNotParserRuleCall_0; }
		
		//(({AndOr.left=current} op=("and"|"or")) right=UpdateTriggerConstraintNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({AndOr.left=current} op=("and"|"or"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AndOr.left=current}
		public Action getAndOrLeftAction_1_0_0() { return cAndOrLeftAction_1_0_0; }
		
		//op=("and"|"or")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("and"|"or")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"and"
		public Keyword getOpAndKeyword_1_0_1_0_0() { return cOpAndKeyword_1_0_1_0_0; }
		
		//"or"
		public Keyword getOpOrKeyword_1_0_1_0_1() { return cOpOrKeyword_1_0_1_0_1; }
		
		//right=UpdateTriggerConstraintNot
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//UpdateTriggerConstraintNot
		public RuleCall getRightUpdateTriggerConstraintNotParserRuleCall_1_1_0() { return cRightUpdateTriggerConstraintNotParserRuleCall_1_1_0; }
	}
	public class UpdateTriggerConstraintNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.UpdateTriggerConstraintNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConstraintAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConstraintUpdateTriggerConstraintAParserRuleCall_0_2_0 = (RuleCall)cConstraintAssignment_0_2.eContents().get(0);
		private final RuleCall cUpdateTriggerConstraintAParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UpdateTriggerConstraintNot returns UpdateTriggerConstraint:
		//    {Not} =>"not" constraint=UpdateTriggerConstraintA |
		//    UpdateTriggerConstraintA;
		@Override public ParserRule getRule() { return rule; }
		
		//{Not} =>"not" constraint=UpdateTriggerConstraintA |
		//UpdateTriggerConstraintA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Not} =>"not" constraint=UpdateTriggerConstraintA
		public Group getGroup_0() { return cGroup_0; }
		
		//{Not}
		public Action getNotAction_0_0() { return cNotAction_0_0; }
		
		//=>"not"
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//constraint=UpdateTriggerConstraintA
		public Assignment getConstraintAssignment_0_2() { return cConstraintAssignment_0_2; }
		
		//UpdateTriggerConstraintA
		public RuleCall getConstraintUpdateTriggerConstraintAParserRuleCall_0_2_0() { return cConstraintUpdateTriggerConstraintAParserRuleCall_0_2_0; }
		
		//UpdateTriggerConstraintA
		public RuleCall getUpdateTriggerConstraintAParserRuleCall_1() { return cUpdateTriggerConstraintAParserRuleCall_1; }
	}
	public class UpdateTriggerConstraintAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.UpdateTriggerConstraintA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUpdateTriggerConstraintParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAtAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAtKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cOpLeastKeyword_1_2_0 = (Keyword)cOpAssignment_1_2.eContents().get(0);
		private final Keyword cAfterKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cVariableAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cVariableIDTerminalRuleCall_1_4_0 = (RuleCall)cVariableAssignment_1_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cTexpAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cTexpTimeExprParserRuleCall_1_6_0 = (RuleCall)cTexpAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAtAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cAtKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cOpMostKeyword_2_2_0 = (Keyword)cOpAssignment_2_2.eContents().get(0);
		private final Keyword cBeforeKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cVariableAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cVariableIDTerminalRuleCall_2_4_0 = (RuleCall)cVariableAssignment_2_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cTexpAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cTexpTimeExprParserRuleCall_2_6_0 = (RuleCall)cTexpAssignment_2_6.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSwitchAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSwitchKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cAfterKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cVariableAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cVariableIDTerminalRuleCall_3_3_0 = (RuleCall)cVariableAssignment_3_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cTexpAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cTexpTimeExprParserRuleCall_3_5_0 = (RuleCall)cTexpAssignment_3_5.eContents().get(0);
		
		//UpdateTriggerConstraintA returns UpdateTriggerConstraint:
		//    "(" UpdateTriggerConstraint ")" |
		//    {At} =>"at" op="least" "after" variable=ID "=" texp=TimeExpr |
		//    {At} =>"at" op="most" "before" variable=ID "=" texp=TimeExpr |
		//    {Switch} =>"switch" "after" variable=ID "=" texp=TimeExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" UpdateTriggerConstraint ")" |
		//{At} =>"at" op="least" "after" variable=ID "=" texp=TimeExpr |
		//{At} =>"at" op="most" "before" variable=ID "=" texp=TimeExpr |
		//{Switch} =>"switch" "after" variable=ID "=" texp=TimeExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" UpdateTriggerConstraint ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//UpdateTriggerConstraint
		public RuleCall getUpdateTriggerConstraintParserRuleCall_0_1() { return cUpdateTriggerConstraintParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{At} =>"at" op="least" "after" variable=ID "=" texp=TimeExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//{At}
		public Action getAtAction_1_0() { return cAtAction_1_0; }
		
		//=>"at"
		public Keyword getAtKeyword_1_1() { return cAtKeyword_1_1; }
		
		//op="least"
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }
		
		//"least"
		public Keyword getOpLeastKeyword_1_2_0() { return cOpLeastKeyword_1_2_0; }
		
		//"after"
		public Keyword getAfterKeyword_1_3() { return cAfterKeyword_1_3; }
		
		//variable=ID
		public Assignment getVariableAssignment_1_4() { return cVariableAssignment_1_4; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_4_0() { return cVariableIDTerminalRuleCall_1_4_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_5() { return cEqualsSignKeyword_1_5; }
		
		//texp=TimeExpr
		public Assignment getTexpAssignment_1_6() { return cTexpAssignment_1_6; }
		
		//TimeExpr
		public RuleCall getTexpTimeExprParserRuleCall_1_6_0() { return cTexpTimeExprParserRuleCall_1_6_0; }
		
		//{At} =>"at" op="most" "before" variable=ID "=" texp=TimeExpr
		public Group getGroup_2() { return cGroup_2; }
		
		//{At}
		public Action getAtAction_2_0() { return cAtAction_2_0; }
		
		//=>"at"
		public Keyword getAtKeyword_2_1() { return cAtKeyword_2_1; }
		
		//op="most"
		public Assignment getOpAssignment_2_2() { return cOpAssignment_2_2; }
		
		//"most"
		public Keyword getOpMostKeyword_2_2_0() { return cOpMostKeyword_2_2_0; }
		
		//"before"
		public Keyword getBeforeKeyword_2_3() { return cBeforeKeyword_2_3; }
		
		//variable=ID
		public Assignment getVariableAssignment_2_4() { return cVariableAssignment_2_4; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_4_0() { return cVariableIDTerminalRuleCall_2_4_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_5() { return cEqualsSignKeyword_2_5; }
		
		//texp=TimeExpr
		public Assignment getTexpAssignment_2_6() { return cTexpAssignment_2_6; }
		
		//TimeExpr
		public RuleCall getTexpTimeExprParserRuleCall_2_6_0() { return cTexpTimeExprParserRuleCall_2_6_0; }
		
		//{Switch} =>"switch" "after" variable=ID "=" texp=TimeExpr
		public Group getGroup_3() { return cGroup_3; }
		
		//{Switch}
		public Action getSwitchAction_3_0() { return cSwitchAction_3_0; }
		
		//=>"switch"
		public Keyword getSwitchKeyword_3_1() { return cSwitchKeyword_3_1; }
		
		//"after"
		public Keyword getAfterKeyword_3_2() { return cAfterKeyword_3_2; }
		
		//variable=ID
		public Assignment getVariableAssignment_3_3() { return cVariableAssignment_3_3; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_3_3_0() { return cVariableIDTerminalRuleCall_3_3_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_4() { return cEqualsSignKeyword_3_4; }
		
		//texp=TimeExpr
		public Assignment getTexpAssignment_3_5() { return cTexpAssignment_3_5; }
		
		//TimeExpr
		public RuleCall getTexpTimeExprParserRuleCall_3_5_0() { return cTexpTimeExprParserRuleCall_3_5_0; }
	}
	public class TimeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.TimeExpr");
		private final RuleCall cTimeExprAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TimeExpr:
		//    TimeExprAddition;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeExprAddition
		public RuleCall getTimeExprAdditionParserRuleCall() { return cTimeExprAdditionParserRuleCall; }
	}
	public class TimeExprAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.TimeExprAddition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTimeExprMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cPlusMinusLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTimeExprMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//TimeExprAddition returns TimeExpr:
		//     TimeExprMultiplication
		//     (({PlusMinus.left=current} op=("+"|"-")) right=TimeExprMultiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeExprMultiplication
		//(({PlusMinus.left=current} op=("+"|"-")) right=TimeExprMultiplication)*
		public Group getGroup() { return cGroup; }
		
		//TimeExprMultiplication
		public RuleCall getTimeExprMultiplicationParserRuleCall_0() { return cTimeExprMultiplicationParserRuleCall_0; }
		
		//(({PlusMinus.left=current} op=("+"|"-")) right=TimeExprMultiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({PlusMinus.left=current} op=("+"|"-"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{PlusMinus.left=current}
		public Action getPlusMinusLeftAction_1_0_0() { return cPlusMinusLeftAction_1_0_0; }
		
		//op=("+"|"-")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("+"|"-")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"+"
		public Keyword getOpPlusSignKeyword_1_0_1_0_0() { return cOpPlusSignKeyword_1_0_1_0_0; }
		
		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_1_0_1; }
		
		//right=TimeExprMultiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//TimeExprMultiplication
		public RuleCall getRightTimeExprMultiplicationParserRuleCall_1_1_0() { return cRightTimeExprMultiplicationParserRuleCall_1_1_0; }
	}
	public class TimeExprMultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.TimeExprMultiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTimeExprAParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpAsteriskKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTimeExprAParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//TimeExprMultiplication returns TimeExpr:
		//    TimeExprA
		//    (({Multiplication.left=current} op='*')
		//        right=TimeExprA)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeExprA
		//(({Multiplication.left=current} op='*')
		//    right=TimeExprA)*
		public Group getGroup() { return cGroup; }
		
		//TimeExprA
		public RuleCall getTimeExprAParserRuleCall_0() { return cTimeExprAParserRuleCall_0; }
		
		//(({Multiplication.left=current} op='*')
		//    right=TimeExprA)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Multiplication.left=current} op='*')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0() { return cMultiplicationLeftAction_1_0_0; }
		
		//op='*'
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_0_1_0() { return cOpAsteriskKeyword_1_0_1_0; }
		
		//right=TimeExprA
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//TimeExprA
		public RuleCall getRightTimeExprAParserRuleCall_1_1_0() { return cRightTimeExprAParserRuleCall_1_1_0; }
	}
	public class TimeExprAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.TimeExprA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTimeExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cIntervalAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIntervalTimeIntervalParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		
		//TimeExprA returns TimeExpr:
		//    '(' TimeExpr ')' |
		//    variable=ID |
		//    interval=TimeInterval;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' TimeExpr ')' |
		//variable=ID |
		//interval=TimeInterval
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' TimeExpr ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//TimeExpr
		public RuleCall getTimeExprParserRuleCall_0_1() { return cTimeExprParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }
		
		//interval=TimeInterval
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }
		
		//TimeInterval
		public RuleCall getIntervalTimeIntervalParserRuleCall_2_0() { return cIntervalTimeIntervalParserRuleCall_2_0; }
	}
	public class TimeIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.TimeInterval");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//TimeInterval:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class CPUFrequencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.CPUFrequency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cUnitAlternatives_1_0 = (Alternatives)cUnitAssignment_1.eContents().get(0);
		private final Keyword cUnitMHzKeyword_1_0_0 = (Keyword)cUnitAlternatives_1_0.eContents().get(0);
		private final Keyword cUnitGHzKeyword_1_0_1 = (Keyword)cUnitAlternatives_1_0.eContents().get(1);
		private final Keyword cUnitTHzKeyword_1_0_2 = (Keyword)cUnitAlternatives_1_0.eContents().get(2);
		
		// // unit=('h' | 'm');
		//CPUFrequency:
		//    value=INT unit=('MHz' | 'GHz' | 'THz');
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT unit=('MHz' | 'GHz' | 'THz')
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//unit=('MHz' | 'GHz' | 'THz')
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//('MHz' | 'GHz' | 'THz')
		public Alternatives getUnitAlternatives_1_0() { return cUnitAlternatives_1_0; }
		
		//'MHz'
		public Keyword getUnitMHzKeyword_1_0_0() { return cUnitMHzKeyword_1_0_0; }
		
		//'GHz'
		public Keyword getUnitGHzKeyword_1_0_1() { return cUnitGHzKeyword_1_0_1; }
		
		//'THz'
		public Keyword getUnitTHzKeyword_1_0_2() { return cUnitTHzKeyword_1_0_2; }
	}
	public class DiskSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.DiskSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cUnitAlternatives_1_0 = (Alternatives)cUnitAssignment_1.eContents().get(0);
		private final Keyword cUnitMBKeyword_1_0_0 = (Keyword)cUnitAlternatives_1_0.eContents().get(0);
		private final Keyword cUnitGBKeyword_1_0_1 = (Keyword)cUnitAlternatives_1_0.eContents().get(1);
		private final Keyword cUnitTBKeyword_1_0_2 = (Keyword)cUnitAlternatives_1_0.eContents().get(2);
		
		//DiskSize:
		//    value=INT unit=('MB' | 'GB' | 'TB');
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT unit=('MB' | 'GB' | 'TB')
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//unit=('MB' | 'GB' | 'TB')
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//('MB' | 'GB' | 'TB')
		public Alternatives getUnitAlternatives_1_0() { return cUnitAlternatives_1_0; }
		
		//'MB'
		public Keyword getUnitMBKeyword_1_0_0() { return cUnitMBKeyword_1_0_0; }
		
		//'GB'
		public Keyword getUnitGBKeyword_1_0_1() { return cUnitGBKeyword_1_0_1; }
		
		//'TB'
		public Keyword getUnitTBKeyword_1_0_2() { return cUnitTBKeyword_1_0_2; }
	}
	public class RamSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.RamSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cUnitAlternatives_1_0 = (Alternatives)cUnitAssignment_1.eContents().get(0);
		private final Keyword cUnitMBKeyword_1_0_0 = (Keyword)cUnitAlternatives_1_0.eContents().get(0);
		private final Keyword cUnitGBKeyword_1_0_1 = (Keyword)cUnitAlternatives_1_0.eContents().get(1);
		private final Keyword cUnitTBKeyword_1_0_2 = (Keyword)cUnitAlternatives_1_0.eContents().get(2);
		
		//RamSize:
		//    value=INT unit=('MB' | 'GB' | 'TB');
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT unit=('MB' | 'GB' | 'TB')
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//unit=('MB' | 'GB' | 'TB')
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//('MB' | 'GB' | 'TB')
		public Alternatives getUnitAlternatives_1_0() { return cUnitAlternatives_1_0; }
		
		//'MB'
		public Keyword getUnitMBKeyword_1_0_0() { return cUnitMBKeyword_1_0_0; }
		
		//'GB'
		public Keyword getUnitGBKeyword_1_0_1() { return cUnitGBKeyword_1_0_1; }
		
		//'TB'
		public Keyword getUnitTBKeyword_1_0_2() { return cUnitTBKeyword_1_0_2; }
	}
	public class IPAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.IPAddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOctet1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOctet1INTTerminalRuleCall_0_0 = (RuleCall)cOctet1Assignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOctet2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOctet2INTTerminalRuleCall_2_0 = (RuleCall)cOctet2Assignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOctet3Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOctet3INTTerminalRuleCall_4_0 = (RuleCall)cOctet3Assignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOctet4Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOctet4INTTerminalRuleCall_6_0 = (RuleCall)cOctet4Assignment_6.eContents().get(0);
		
		//IPAddress:
		//    octet1=INT'.'octet2=INT'.'octet3=INT'.'octet4=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//octet1=INT'.'octet2=INT'.'octet3=INT'.'octet4=INT
		public Group getGroup() { return cGroup; }
		
		//octet1=INT
		public Assignment getOctet1Assignment_0() { return cOctet1Assignment_0; }
		
		//INT
		public RuleCall getOctet1INTTerminalRuleCall_0_0() { return cOctet1INTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//octet2=INT
		public Assignment getOctet2Assignment_2() { return cOctet2Assignment_2; }
		
		//INT
		public RuleCall getOctet2INTTerminalRuleCall_2_0() { return cOctet2INTTerminalRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//octet3=INT
		public Assignment getOctet3Assignment_4() { return cOctet3Assignment_4; }
		
		//INT
		public RuleCall getOctet3INTTerminalRuleCall_4_0() { return cOctet3INTTerminalRuleCall_4_0; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//octet4=INT
		public Assignment getOctet4Assignment_6() { return cOctet4Assignment_6; }
		
		//INT
		public RuleCall getOctet4INTTerminalRuleCall_6_0() { return cOctet4INTTerminalRuleCall_6_0; }
	}
	public class IPRangeAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.IPRangeA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddressIPAddressParserRuleCall_0_0 = (RuleCall)cAddressAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBitmaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBitmaskINTTerminalRuleCall_2_0 = (RuleCall)cBitmaskAssignment_2.eContents().get(0);
		
		//IPRangeA:
		//    address=IPAddress'/'bitmask=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//address=IPAddress'/'bitmask=INT
		public Group getGroup() { return cGroup; }
		
		//address=IPAddress
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }
		
		//IPAddress
		public RuleCall getAddressIPAddressParserRuleCall_0_0() { return cAddressIPAddressParserRuleCall_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//bitmask=INT
		public Assignment getBitmaskAssignment_2() { return cBitmaskAssignment_2; }
		
		//INT
		public RuleCall getBitmaskINTTerminalRuleCall_2_0() { return cBitmaskINTTerminalRuleCall_2_0; }
	}
	public class OSVersionEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.OSVersionE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWindowsXPKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWindows7Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cWindows8Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cWindows10Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUbuntu14Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUbuntu16Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAndroid21Keyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAndroid19Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//OSVersionE:
		//    'WindowsXP' |
		//    'Windows7' |
		//    'Windows8' |
		//    'Windows10' |
		//    'Ubuntu14' |
		//    'Ubuntu16' |
		//    'Android-21' |
		//    'Android-19';
		@Override public ParserRule getRule() { return rule; }
		
		//'WindowsXP' |
		//'Windows7' |
		//'Windows8' |
		//'Windows10' |
		//'Ubuntu14' |
		//'Ubuntu16' |
		//'Android-21' |
		//'Android-19'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'WindowsXP'
		public Keyword getWindowsXPKeyword_0() { return cWindowsXPKeyword_0; }
		
		//'Windows7'
		public Keyword getWindows7Keyword_1() { return cWindows7Keyword_1; }
		
		//'Windows8'
		public Keyword getWindows8Keyword_2() { return cWindows8Keyword_2; }
		
		//'Windows10'
		public Keyword getWindows10Keyword_3() { return cWindows10Keyword_3; }
		
		//'Ubuntu14'
		public Keyword getUbuntu14Keyword_4() { return cUbuntu14Keyword_4; }
		
		//'Ubuntu16'
		public Keyword getUbuntu16Keyword_5() { return cUbuntu16Keyword_5; }
		
		//'Android-21'
		public Keyword getAndroid21Keyword_6() { return cAndroid21Keyword_6; }
		
		//'Android-19'
		public Keyword getAndroid19Keyword_7() { return cAndroid19Keyword_7; }
	}
	public class OSFamilyEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.OSFamilyE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMicrosoftKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLinuxKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOSxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIOSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAndroidKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		// // 添加你需要的具体版本
		//OSFamilyE:
		//    'Microsoft' |
		//    'Linux' |
		//    'OSx' |
		//    'iOS' |
		//    'Android';
		@Override public ParserRule getRule() { return rule; }
		
		//'Microsoft' |
		//'Linux' |
		//'OSx' |
		//'iOS' |
		//'Android'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Microsoft'
		public Keyword getMicrosoftKeyword_0() { return cMicrosoftKeyword_0; }
		
		//'Linux'
		public Keyword getLinuxKeyword_1() { return cLinuxKeyword_1; }
		
		//'OSx'
		public Keyword getOSxKeyword_2() { return cOSxKeyword_2; }
		
		//'iOS'
		public Keyword getIOSKeyword_3() { return cIOSKeyword_3; }
		
		//'Android'
		public Keyword getAndroidKeyword_4() { return cAndroidKeyword_4; }
	}
	
	public class IPOperationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.IPOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cConnectedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cConnectedConnectedKeyword_0_0 = (Keyword)cConnectedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotConnectedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotConnectedNotConnectedKeyword_1_0 = (Keyword)cNotConnectedEnumLiteralDeclaration_1.eContents().get(0);
		
		//// Define the operation for IP
		//enum IPOperation:
		//    connected |
		//    notConnected;
		public EnumRule getRule() { return rule; }
		
		//connected |
		//notConnected
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//connected
		public EnumLiteralDeclaration getConnectedEnumLiteralDeclaration_0() { return cConnectedEnumLiteralDeclaration_0; }
		
		public Keyword getConnectedConnectedKeyword_0_0() { return cConnectedConnectedKeyword_0_0; }
		
		//notConnected
		public EnumLiteralDeclaration getNotConnectedEnumLiteralDeclaration_1() { return cNotConnectedEnumLiteralDeclaration_1; }
		
		public Keyword getNotConnectedNotConnectedKeyword_1_0() { return cNotConnectedNotConnectedKeyword_1_0; }
	}
	public class HardwareProfileElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.csec.xtext.Vsdl.HardwareProfile");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTinyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTinyTinyKeyword_0_0 = (Keyword)cTinyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMediumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMediumMediumKeyword_1_0 = (Keyword)cMediumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLargeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLargeLargeKeyword_2_0 = (Keyword)cLargeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMobileEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMobileMobileKeyword_3_0 = (Keyword)cMobileEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWearableEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWearableWearableKeyword_4_0 = (Keyword)cWearableEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSensorEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSensorSensorKeyword_5_0 = (Keyword)cSensorEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cServerEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cServerServerKeyword_6_0 = (Keyword)cServerEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum HardwareProfile:
		//        tiny |
		//        medium |
		//        large |
		//        mobile |
		//        wearable |
		//        sensor |
		//        server;
		public EnumRule getRule() { return rule; }
		
		//tiny |
		//medium |
		//large |
		//mobile |
		//wearable |
		//sensor |
		//server
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tiny
		public EnumLiteralDeclaration getTinyEnumLiteralDeclaration_0() { return cTinyEnumLiteralDeclaration_0; }
		
		public Keyword getTinyTinyKeyword_0_0() { return cTinyTinyKeyword_0_0; }
		
		//medium
		public EnumLiteralDeclaration getMediumEnumLiteralDeclaration_1() { return cMediumEnumLiteralDeclaration_1; }
		
		public Keyword getMediumMediumKeyword_1_0() { return cMediumMediumKeyword_1_0; }
		
		//large
		public EnumLiteralDeclaration getLargeEnumLiteralDeclaration_2() { return cLargeEnumLiteralDeclaration_2; }
		
		public Keyword getLargeLargeKeyword_2_0() { return cLargeLargeKeyword_2_0; }
		
		//mobile
		public EnumLiteralDeclaration getMobileEnumLiteralDeclaration_3() { return cMobileEnumLiteralDeclaration_3; }
		
		public Keyword getMobileMobileKeyword_3_0() { return cMobileMobileKeyword_3_0; }
		
		//wearable
		public EnumLiteralDeclaration getWearableEnumLiteralDeclaration_4() { return cWearableEnumLiteralDeclaration_4; }
		
		public Keyword getWearableWearableKeyword_4_0() { return cWearableWearableKeyword_4_0; }
		
		//sensor
		public EnumLiteralDeclaration getSensorEnumLiteralDeclaration_5() { return cSensorEnumLiteralDeclaration_5; }
		
		public Keyword getSensorSensorKeyword_5_0() { return cSensorSensorKeyword_5_0; }
		
		//server
		public EnumLiteralDeclaration getServerEnumLiteralDeclaration_6() { return cServerEnumLiteralDeclaration_6; }
		
		public Keyword getServerServerKeyword_6_0() { return cServerServerKeyword_6_0; }
	}
	
	private final ModelElements pModel;
	private final ScenElemElements pScenElem;
	private final NodeElements pNode;
	private final NodeConstraintElements pNodeConstraint;
	private final GuardedNodeConstraintElements pGuardedNodeConstraint;
	private final SimpleNodeConstraintElements pSimpleNodeConstraint;
	private final SimpleNodeConstraintAndOrElements pSimpleNodeConstraintAndOr;
	private final SimpleNodeConstraintNotElements pSimpleNodeConstraintNot;
	private final SimpleNodeConstraintAElements pSimpleNodeConstraintA;
	private final NodeHardwareConstraintAElements pNodeHardwareConstraintA;
	private final NodeNetworkConstraintAElements pNodeNetworkConstraintA;
	private final NodeSoftwareConstraintAElements pNodeSoftwareConstraintA;
	private final SoftwareInstallationElements pSoftwareInstallation;
	private final VersionNumberElements pVersionNumber;
	private final SoftwareDependencyElements pSoftwareDependency;
	private final ConfigOptionsElements pConfigOptions;
	private final ConfigPairElements pConfigPair;
	private final NetworkElements pNetwork;
	private final NetworkConstraintElements pNetworkConstraint;
	private final GuardedNetworkConstraintElements pGuardedNetworkConstraint;
	private final SimpleNetworkConstraintElements pSimpleNetworkConstraint;
	private final SimpleNetworkConstraintAndOrElements pSimpleNetworkConstraintAndOr;
	private final SimpleNetworkConstraintNotElements pSimpleNetworkConstraintNot;
	private final SimpleNetworkConstraintAElements pSimpleNetworkConstraintA;
	private final NetworkGatewayConstraintElements pNetworkGatewayConstraint;
	private final NetworkParticipantsConstraintElements pNetworkParticipantsConstraint;
	private final UpdateTriggerConstraintElements pUpdateTriggerConstraint;
	private final UpdateTriggerConstraintAndOrElements pUpdateTriggerConstraintAndOr;
	private final UpdateTriggerConstraintNotElements pUpdateTriggerConstraintNot;
	private final UpdateTriggerConstraintAElements pUpdateTriggerConstraintA;
	private final TimeExprElements pTimeExpr;
	private final TimeExprAdditionElements pTimeExprAddition;
	private final TimeExprMultiplicationElements pTimeExprMultiplication;
	private final TimeExprAElements pTimeExprA;
	private final TimeIntervalElements pTimeInterval;
	private final CPUFrequencyElements pCPUFrequency;
	private final DiskSizeElements pDiskSize;
	private final RamSizeElements pRamSize;
	private final IPAddressElements pIPAddress;
	private final IPRangeAElements pIPRangeA;
	private final OSVersionEElements pOSVersionE;
	private final OSFamilyEElements pOSFamilyE;
	private final IPOperationElements eIPOperation;
	private final HardwareProfileElements eHardwareProfile;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VsdlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pScenElem = new ScenElemElements();
		this.pNode = new NodeElements();
		this.pNodeConstraint = new NodeConstraintElements();
		this.pGuardedNodeConstraint = new GuardedNodeConstraintElements();
		this.pSimpleNodeConstraint = new SimpleNodeConstraintElements();
		this.pSimpleNodeConstraintAndOr = new SimpleNodeConstraintAndOrElements();
		this.pSimpleNodeConstraintNot = new SimpleNodeConstraintNotElements();
		this.pSimpleNodeConstraintA = new SimpleNodeConstraintAElements();
		this.pNodeHardwareConstraintA = new NodeHardwareConstraintAElements();
		this.pNodeNetworkConstraintA = new NodeNetworkConstraintAElements();
		this.pNodeSoftwareConstraintA = new NodeSoftwareConstraintAElements();
		this.pSoftwareInstallation = new SoftwareInstallationElements();
		this.pVersionNumber = new VersionNumberElements();
		this.pSoftwareDependency = new SoftwareDependencyElements();
		this.pConfigOptions = new ConfigOptionsElements();
		this.pConfigPair = new ConfigPairElements();
		this.pNetwork = new NetworkElements();
		this.pNetworkConstraint = new NetworkConstraintElements();
		this.pGuardedNetworkConstraint = new GuardedNetworkConstraintElements();
		this.pSimpleNetworkConstraint = new SimpleNetworkConstraintElements();
		this.pSimpleNetworkConstraintAndOr = new SimpleNetworkConstraintAndOrElements();
		this.pSimpleNetworkConstraintNot = new SimpleNetworkConstraintNotElements();
		this.pSimpleNetworkConstraintA = new SimpleNetworkConstraintAElements();
		this.pNetworkGatewayConstraint = new NetworkGatewayConstraintElements();
		this.pNetworkParticipantsConstraint = new NetworkParticipantsConstraintElements();
		this.pUpdateTriggerConstraint = new UpdateTriggerConstraintElements();
		this.pUpdateTriggerConstraintAndOr = new UpdateTriggerConstraintAndOrElements();
		this.pUpdateTriggerConstraintNot = new UpdateTriggerConstraintNotElements();
		this.pUpdateTriggerConstraintA = new UpdateTriggerConstraintAElements();
		this.pTimeExpr = new TimeExprElements();
		this.pTimeExprAddition = new TimeExprAdditionElements();
		this.pTimeExprMultiplication = new TimeExprMultiplicationElements();
		this.pTimeExprA = new TimeExprAElements();
		this.pTimeInterval = new TimeIntervalElements();
		this.pCPUFrequency = new CPUFrequencyElements();
		this.pDiskSize = new DiskSizeElements();
		this.pRamSize = new RamSizeElements();
		this.pIPAddress = new IPAddressElements();
		this.pIPRangeA = new IPRangeAElements();
		this.pOSVersionE = new OSVersionEElements();
		this.pOSFamilyE = new OSFamilyEElements();
		this.eIPOperation = new IPOperationElements();
		this.eHardwareProfile = new HardwareProfileElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.csec.xtext.Vsdl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'scenario' name=ID ('duration' TimeToUse=TimeInterval)? '{' Elements += ScenElem* '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ScenElem:
	//    Node |
	//    Network;
	public ScenElemElements getScenElemAccess() {
		return pScenElem;
	}
	
	public ParserRule getScenElemRule() {
		return getScenElemAccess().getRule();
	}
	
	//Node:
	//    'node' name=ID '{' constraints += NodeConstraint* '}';
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//NodeConstraint:
	//    GuardedNodeConstraint ';'|
	//    SimpleNodeConstraint ';';
	public NodeConstraintElements getNodeConstraintAccess() {
		return pNodeConstraint;
	}
	
	public ParserRule getNodeConstraintRule() {
		return getNodeConstraintAccess().getRule();
	}
	
	//GuardedNodeConstraint returns NodeConstraint:
	//    '[' triggerconstraint=UpdateTriggerConstraint ']' '->' nodeconstraint=SimpleNodeConstraint;
	public GuardedNodeConstraintElements getGuardedNodeConstraintAccess() {
		return pGuardedNodeConstraint;
	}
	
	public ParserRule getGuardedNodeConstraintRule() {
		return getGuardedNodeConstraintAccess().getRule();
	}
	
	//SimpleNodeConstraint returns NodeConstraint:
	//    SimpleNodeConstraintAndOr;
	public SimpleNodeConstraintElements getSimpleNodeConstraintAccess() {
		return pSimpleNodeConstraint;
	}
	
	public ParserRule getSimpleNodeConstraintRule() {
		return getSimpleNodeConstraintAccess().getRule();
	}
	
	//SimpleNodeConstraintAndOr returns NodeConstraint:
	//    SimpleNodeConstraintNot
	//    (({AndOr.left=current} op=("and"|"or")) right=SimpleNodeConstraintNot)*;
	public SimpleNodeConstraintAndOrElements getSimpleNodeConstraintAndOrAccess() {
		return pSimpleNodeConstraintAndOr;
	}
	
	public ParserRule getSimpleNodeConstraintAndOrRule() {
		return getSimpleNodeConstraintAndOrAccess().getRule();
	}
	
	//SimpleNodeConstraintNot returns NodeConstraint:
	//    {Not} =>"not" constraint=SimpleNodeConstraintA |
	//    SimpleNodeConstraintA;
	public SimpleNodeConstraintNotElements getSimpleNodeConstraintNotAccess() {
		return pSimpleNodeConstraintNot;
	}
	
	public ParserRule getSimpleNodeConstraintNotRule() {
		return getSimpleNodeConstraintNotAccess().getRule();
	}
	
	//SimpleNodeConstraintA returns NodeConstraint:
	//    "(" SimpleNodeConstraint ")" |
	//    NodeHardwareConstraintA |
	//    NodeSoftwareConstraintA |
	//    NodeNetworkConstraintA;
	public SimpleNodeConstraintAElements getSimpleNodeConstraintAAccess() {
		return pSimpleNodeConstraintA;
	}
	
	public ParserRule getSimpleNodeConstraintARule() {
		return getSimpleNodeConstraintAAccess().getRule();
	}
	
	//NodeHardwareConstraintA returns NodeConstraint:
	//    {CPU} =>'cpu' 'speed' op='equal' 'to' value=CPUFrequency |
	//    {CPU} =>'cpu' op='faster' 'than' value=CPUFrequency |
	//    {CPU} =>'cpu' op='slower' 'than' value=CPUFrequency |
	//    {CPU} =>'cpu' 'speed' sameas ?='of' id=[Node] |
	//    {Disk} =>'disk' 'size' op='equal' 'to' value=DiskSize |
	//    {Disk} =>'disk' op='larger' 'than' value=DiskSize |
	//    {Disk} =>'disk' op='smaller' 'than' value=DiskSize |
	//    {Disk} =>'disk' 'size' sameas ?='of' id=[Node] |
	//    {Ram} =>'ram' 'size' op='equal' 'to' value=RamSize |
	//    {Ram} =>'ram' op='larger' 'than' value=RamSize |
	//    {Ram} =>'ram' op='smaller' 'than' value=RamSize |
	//    {Ram} =>'ram' 'size' sameas ?='of' id=[Node] |
	//    {Flavour} =>'flavour' profile=HardwareProfile;
	public NodeHardwareConstraintAElements getNodeHardwareConstraintAAccess() {
		return pNodeHardwareConstraintA;
	}
	
	public ParserRule getNodeHardwareConstraintARule() {
		return getNodeHardwareConstraintAAccess().getRule();
	}
	
	//// 节点网络约束
	//NodeNetworkConstraintA returns NodeConstraint:
	//    {IP} =>'ip' 'address' op='equal' 'to' ipAddress=IPAddress |
	//    {IP} =>'ip' 'address' op='in' 'range' ipRange=IPRangeA |
	//    {IP} =>'ip' 'address' 'is' op='connected' 'to' node=[Node]|
	//    {Gateway} =>"gateway" 'is' gatewayIP = IPAddress|
	//    {DNS} => 'DNS' 'is' DNSIP = IPAddress;
	public NodeNetworkConstraintAElements getNodeNetworkConstraintAAccess() {
		return pNodeNetworkConstraintA;
	}
	
	public ParserRule getNodeNetworkConstraintARule() {
		return getNodeNetworkConstraintAAccess().getRule();
	}
	
	//NodeSoftwareConstraintA returns NodeConstraint:
	//    'node' {OS} =>'OS' 'is' version=OSVersionE |
	//    'node' 'OS' {OSFamily} =>'family' 'is' family=OSFamilyE|
	//    'mounts' 'software' software=SoftwareInstallation;
	public NodeSoftwareConstraintAElements getNodeSoftwareConstraintAAccess() {
		return pNodeSoftwareConstraintA;
	}
	
	public ParserRule getNodeSoftwareConstraintARule() {
		return getNodeSoftwareConstraintAAccess().getRule();
	}
	
	////    'suffers' 'from' vulnID=VulnerabilityID;
	//////
	////VulnerabilityID:
	////    STRING;
	//SoftwareInstallation:
	//    softwareID=ID ('version' version=VersionNumber)?
	//    ('with' dependencies+=SoftwareDependency (',' dependencies+=SoftwareDependency)*)?
	//    ('config' config=ConfigOptions)?;
	public SoftwareInstallationElements getSoftwareInstallationAccess() {
		return pSoftwareInstallation;
	}
	
	public ParserRule getSoftwareInstallationRule() {
		return getSoftwareInstallationAccess().getRule();
	}
	
	//VersionNumber:
	//    INT ('.' INT)*;
	public VersionNumberElements getVersionNumberAccess() {
		return pVersionNumber;
	}
	
	public ParserRule getVersionNumberRule() {
		return getVersionNumberAccess().getRule();
	}
	
	//SoftwareDependency:
	//    dependencyID=ID;
	public SoftwareDependencyElements getSoftwareDependencyAccess() {
		return pSoftwareDependency;
	}
	
	public ParserRule getSoftwareDependencyRule() {
		return getSoftwareDependencyAccess().getRule();
	}
	
	//ConfigOptions:
	//    '{' configPairs+=ConfigPair (',' configPairs+=ConfigPair)* '}';
	public ConfigOptionsElements getConfigOptionsAccess() {
		return pConfigOptions;
	}
	
	public ParserRule getConfigOptionsRule() {
		return getConfigOptionsAccess().getRule();
	}
	
	//ConfigPair:
	//    key=ID '=' value=STRING;
	public ConfigPairElements getConfigPairAccess() {
		return pConfigPair;
	}
	
	public ParserRule getConfigPairRule() {
		return getConfigPairAccess().getRule();
	}
	
	//// Define IP as a part of your Node or Network
	////IP:
	////    'node' 'has' 'IP' 'address' ipAddress=IPAddress
	////    ('op' op=IPOperation)?
	////    ('id' id=[Node])?;
	////
	//Network:
	//    'network' name=ID '{' constraints += NetworkConstraint* '}';
	public NetworkElements getNetworkAccess() {
		return pNetwork;
	}
	
	public ParserRule getNetworkRule() {
		return getNetworkAccess().getRule();
	}
	
	//NetworkConstraint:
	//    GuardedNetworkConstraint ';'|
	//    SimpleNetworkConstraint ';';
	public NetworkConstraintElements getNetworkConstraintAccess() {
		return pNetworkConstraint;
	}
	
	public ParserRule getNetworkConstraintRule() {
		return getNetworkConstraintAccess().getRule();
	}
	
	//GuardedNetworkConstraint returns NetworkConstraint:
	//    '[' networktriggerconstraint=UpdateTriggerConstraint ']' '->' networkconstraint=SimpleNetworkConstraint;
	public GuardedNetworkConstraintElements getGuardedNetworkConstraintAccess() {
		return pGuardedNetworkConstraint;
	}
	
	public ParserRule getGuardedNetworkConstraintRule() {
		return getGuardedNetworkConstraintAccess().getRule();
	}
	
	//SimpleNetworkConstraint returns NetworkConstraint:
	//    SimpleNetworkConstraintAndOr;
	public SimpleNetworkConstraintElements getSimpleNetworkConstraintAccess() {
		return pSimpleNetworkConstraint;
	}
	
	public ParserRule getSimpleNetworkConstraintRule() {
		return getSimpleNetworkConstraintAccess().getRule();
	}
	
	//SimpleNetworkConstraintAndOr returns NetworkConstraint:
	//    SimpleNetworkConstraintNot
	//    (({AndOr.left=current} op=("and"|"or")) right=SimpleNetworkConstraintNot)*;
	public SimpleNetworkConstraintAndOrElements getSimpleNetworkConstraintAndOrAccess() {
		return pSimpleNetworkConstraintAndOr;
	}
	
	public ParserRule getSimpleNetworkConstraintAndOrRule() {
		return getSimpleNetworkConstraintAndOrAccess().getRule();
	}
	
	//SimpleNetworkConstraintNot returns NetworkConstraint:
	//    {Not} =>"not" constraint=SimpleNetworkConstraintA |
	//    SimpleNetworkConstraintA;
	public SimpleNetworkConstraintNotElements getSimpleNetworkConstraintNotAccess() {
		return pSimpleNetworkConstraintNot;
	}
	
	public ParserRule getSimpleNetworkConstraintNotRule() {
		return getSimpleNetworkConstraintNotAccess().getRule();
	}
	
	//SimpleNetworkConstraintA returns NetworkConstraint:
	//    "(" SimpleNetworkConstraint ")" |
	//    NetworkGatewayConstraint |
	//    NetworkParticipantsConstraint;
	public SimpleNetworkConstraintAElements getSimpleNetworkConstraintAAccess() {
		return pSimpleNetworkConstraintA;
	}
	
	public ParserRule getSimpleNetworkConstraintARule() {
		return getSimpleNetworkConstraintAAccess().getRule();
	}
	
	//NetworkGatewayConstraint returns NetworkConstraint:
	//    {IPRange} =>"addresses" "range" "is" range=IPRangeA |
	//    {Gateway} =>"gateway" "has" "direct" "access" "to" "the" internet ?="Internet";
	public NetworkGatewayConstraintElements getNetworkGatewayConstraintAccess() {
		return pNetworkGatewayConstraint;
	}
	
	public ParserRule getNetworkGatewayConstraintRule() {
		return getNetworkGatewayConstraintAccess().getRule();
	}
	
	//NetworkParticipantsConstraint returns NetworkConstraint:
	//    "node" id=[Node] "is" op="connected" |
	//    "node" id=[Node] "has" op="IP" ip=IPAddress;
	public NetworkParticipantsConstraintElements getNetworkParticipantsConstraintAccess() {
		return pNetworkParticipantsConstraint;
	}
	
	public ParserRule getNetworkParticipantsConstraintRule() {
		return getNetworkParticipantsConstraintAccess().getRule();
	}
	
	//UpdateTriggerConstraint:
	//    UpdateTriggerConstraintAndOr;
	public UpdateTriggerConstraintElements getUpdateTriggerConstraintAccess() {
		return pUpdateTriggerConstraint;
	}
	
	public ParserRule getUpdateTriggerConstraintRule() {
		return getUpdateTriggerConstraintAccess().getRule();
	}
	
	//UpdateTriggerConstraintAndOr returns UpdateTriggerConstraint:
	//     UpdateTriggerConstraintNot
	//     (({AndOr.left=current} op=("and"|"or")) right=UpdateTriggerConstraintNot)*;
	public UpdateTriggerConstraintAndOrElements getUpdateTriggerConstraintAndOrAccess() {
		return pUpdateTriggerConstraintAndOr;
	}
	
	public ParserRule getUpdateTriggerConstraintAndOrRule() {
		return getUpdateTriggerConstraintAndOrAccess().getRule();
	}
	
	//UpdateTriggerConstraintNot returns UpdateTriggerConstraint:
	//    {Not} =>"not" constraint=UpdateTriggerConstraintA |
	//    UpdateTriggerConstraintA;
	public UpdateTriggerConstraintNotElements getUpdateTriggerConstraintNotAccess() {
		return pUpdateTriggerConstraintNot;
	}
	
	public ParserRule getUpdateTriggerConstraintNotRule() {
		return getUpdateTriggerConstraintNotAccess().getRule();
	}
	
	//UpdateTriggerConstraintA returns UpdateTriggerConstraint:
	//    "(" UpdateTriggerConstraint ")" |
	//    {At} =>"at" op="least" "after" variable=ID "=" texp=TimeExpr |
	//    {At} =>"at" op="most" "before" variable=ID "=" texp=TimeExpr |
	//    {Switch} =>"switch" "after" variable=ID "=" texp=TimeExpr;
	public UpdateTriggerConstraintAElements getUpdateTriggerConstraintAAccess() {
		return pUpdateTriggerConstraintA;
	}
	
	public ParserRule getUpdateTriggerConstraintARule() {
		return getUpdateTriggerConstraintAAccess().getRule();
	}
	
	//TimeExpr:
	//    TimeExprAddition;
	public TimeExprElements getTimeExprAccess() {
		return pTimeExpr;
	}
	
	public ParserRule getTimeExprRule() {
		return getTimeExprAccess().getRule();
	}
	
	//TimeExprAddition returns TimeExpr:
	//     TimeExprMultiplication
	//     (({PlusMinus.left=current} op=("+"|"-")) right=TimeExprMultiplication)*;
	public TimeExprAdditionElements getTimeExprAdditionAccess() {
		return pTimeExprAddition;
	}
	
	public ParserRule getTimeExprAdditionRule() {
		return getTimeExprAdditionAccess().getRule();
	}
	
	//TimeExprMultiplication returns TimeExpr:
	//    TimeExprA
	//    (({Multiplication.left=current} op='*')
	//        right=TimeExprA)*;
	public TimeExprMultiplicationElements getTimeExprMultiplicationAccess() {
		return pTimeExprMultiplication;
	}
	
	public ParserRule getTimeExprMultiplicationRule() {
		return getTimeExprMultiplicationAccess().getRule();
	}
	
	//TimeExprA returns TimeExpr:
	//    '(' TimeExpr ')' |
	//    variable=ID |
	//    interval=TimeInterval;
	public TimeExprAElements getTimeExprAAccess() {
		return pTimeExprA;
	}
	
	public ParserRule getTimeExprARule() {
		return getTimeExprAAccess().getRule();
	}
	
	//TimeInterval:
	//    value=INT;
	public TimeIntervalElements getTimeIntervalAccess() {
		return pTimeInterval;
	}
	
	public ParserRule getTimeIntervalRule() {
		return getTimeIntervalAccess().getRule();
	}
	
	// // unit=('h' | 'm');
	//CPUFrequency:
	//    value=INT unit=('MHz' | 'GHz' | 'THz');
	public CPUFrequencyElements getCPUFrequencyAccess() {
		return pCPUFrequency;
	}
	
	public ParserRule getCPUFrequencyRule() {
		return getCPUFrequencyAccess().getRule();
	}
	
	//DiskSize:
	//    value=INT unit=('MB' | 'GB' | 'TB');
	public DiskSizeElements getDiskSizeAccess() {
		return pDiskSize;
	}
	
	public ParserRule getDiskSizeRule() {
		return getDiskSizeAccess().getRule();
	}
	
	//RamSize:
	//    value=INT unit=('MB' | 'GB' | 'TB');
	public RamSizeElements getRamSizeAccess() {
		return pRamSize;
	}
	
	public ParserRule getRamSizeRule() {
		return getRamSizeAccess().getRule();
	}
	
	//IPAddress:
	//    octet1=INT'.'octet2=INT'.'octet3=INT'.'octet4=INT;
	public IPAddressElements getIPAddressAccess() {
		return pIPAddress;
	}
	
	public ParserRule getIPAddressRule() {
		return getIPAddressAccess().getRule();
	}
	
	//IPRangeA:
	//    address=IPAddress'/'bitmask=INT;
	public IPRangeAElements getIPRangeAAccess() {
		return pIPRangeA;
	}
	
	public ParserRule getIPRangeARule() {
		return getIPRangeAAccess().getRule();
	}
	
	//OSVersionE:
	//    'WindowsXP' |
	//    'Windows7' |
	//    'Windows8' |
	//    'Windows10' |
	//    'Ubuntu14' |
	//    'Ubuntu16' |
	//    'Android-21' |
	//    'Android-19';
	public OSVersionEElements getOSVersionEAccess() {
		return pOSVersionE;
	}
	
	public ParserRule getOSVersionERule() {
		return getOSVersionEAccess().getRule();
	}
	
	// // 添加你需要的具体版本
	//OSFamilyE:
	//    'Microsoft' |
	//    'Linux' |
	//    'OSx' |
	//    'iOS' |
	//    'Android';
	public OSFamilyEElements getOSFamilyEAccess() {
		return pOSFamilyE;
	}
	
	public ParserRule getOSFamilyERule() {
		return getOSFamilyEAccess().getRule();
	}
	
	//// Define the operation for IP
	//enum IPOperation:
	//    connected |
	//    notConnected;
	public IPOperationElements getIPOperationAccess() {
		return eIPOperation;
	}
	
	public EnumRule getIPOperationRule() {
		return getIPOperationAccess().getRule();
	}
	
	//enum HardwareProfile:
	//        tiny |
	//        medium |
	//        large |
	//        mobile |
	//        wearable |
	//        sensor |
	//        server;
	public HardwareProfileElements getHardwareProfileAccess() {
		return eHardwareProfile;
	}
	
	public EnumRule getHardwareProfileRule() {
		return getHardwareProfileAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

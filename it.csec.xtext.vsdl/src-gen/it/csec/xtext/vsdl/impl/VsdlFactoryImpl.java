/**
 * generated by Xtext 2.35.0
 */
package it.csec.xtext.vsdl.impl;

import it.csec.xtext.vsdl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class VsdlFactoryImpl extends EFactoryImpl implements VsdlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static VsdlFactory init()
  {
    try
    {
      VsdlFactory theVsdlFactory = (VsdlFactory)EPackage.Registry.INSTANCE.getEFactory(VsdlPackage.eNS_URI);
      if (theVsdlFactory != null)
      {
        return theVsdlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new VsdlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VsdlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case VsdlPackage.MODEL: return createModel();
      case VsdlPackage.SCEN_ELEM: return createScenElem();
      case VsdlPackage.NODE: return createNode();
      case VsdlPackage.NODE_CONSTRAINT: return createNodeConstraint();
      case VsdlPackage.SOFTWARE_INSTALLATION: return createSoftwareInstallation();
      case VsdlPackage.SOFTWARE_DEPENDENCY: return createSoftwareDependency();
      case VsdlPackage.CONFIG_OPTIONS: return createConfigOptions();
      case VsdlPackage.CONFIG_PAIR: return createConfigPair();
      case VsdlPackage.NETWORK: return createNetwork();
      case VsdlPackage.NETWORK_CONSTRAINT: return createNetworkConstraint();
      case VsdlPackage.UPDATE_TRIGGER_CONSTRAINT: return createUpdateTriggerConstraint();
      case VsdlPackage.TIME_EXPR: return createTimeExpr();
      case VsdlPackage.TIME_INTERVAL: return createTimeInterval();
      case VsdlPackage.CPU_FREQUENCY: return createCPUFrequency();
      case VsdlPackage.DISK_SIZE: return createDiskSize();
      case VsdlPackage.RAM_SIZE: return createRamSize();
      case VsdlPackage.IP_ADDRESS: return createIPAddress();
      case VsdlPackage.IP_RANGE_A: return createIPRangeA();
      case VsdlPackage.AND_OR: return createAndOr();
      case VsdlPackage.NOT: return createNot();
      case VsdlPackage.CPU: return createCPU();
      case VsdlPackage.DISK: return createDisk();
      case VsdlPackage.RAM: return createRam();
      case VsdlPackage.FLAVOUR: return createFlavour();
      case VsdlPackage.IP: return createIP();
      case VsdlPackage.OS: return createOS();
      case VsdlPackage.OS_FAMILY: return createOSFamily();
      case VsdlPackage.IP_RANGE: return createIPRange();
      case VsdlPackage.GATEWAY: return createGateway();
      case VsdlPackage.AT: return createAt();
      case VsdlPackage.SWITCH: return createSwitch();
      case VsdlPackage.PLUS_MINUS: return createPlusMinus();
      case VsdlPackage.MULTIPLICATION: return createMultiplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case VsdlPackage.IP_OPERATION:
        return createIPOperationFromString(eDataType, initialValue);
      case VsdlPackage.HARDWARE_PROFILE:
        return createHardwareProfileFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case VsdlPackage.IP_OPERATION:
        return convertIPOperationToString(eDataType, instanceValue);
      case VsdlPackage.HARDWARE_PROFILE:
        return convertHardwareProfileToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScenElem createScenElem()
  {
    ScenElemImpl scenElem = new ScenElemImpl();
    return scenElem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeConstraint createNodeConstraint()
  {
    NodeConstraintImpl nodeConstraint = new NodeConstraintImpl();
    return nodeConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoftwareInstallation createSoftwareInstallation()
  {
    SoftwareInstallationImpl softwareInstallation = new SoftwareInstallationImpl();
    return softwareInstallation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoftwareDependency createSoftwareDependency()
  {
    SoftwareDependencyImpl softwareDependency = new SoftwareDependencyImpl();
    return softwareDependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigOptions createConfigOptions()
  {
    ConfigOptionsImpl configOptions = new ConfigOptionsImpl();
    return configOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigPair createConfigPair()
  {
    ConfigPairImpl configPair = new ConfigPairImpl();
    return configPair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Network createNetwork()
  {
    NetworkImpl network = new NetworkImpl();
    return network;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NetworkConstraint createNetworkConstraint()
  {
    NetworkConstraintImpl networkConstraint = new NetworkConstraintImpl();
    return networkConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateTriggerConstraint createUpdateTriggerConstraint()
  {
    UpdateTriggerConstraintImpl updateTriggerConstraint = new UpdateTriggerConstraintImpl();
    return updateTriggerConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeExpr createTimeExpr()
  {
    TimeExprImpl timeExpr = new TimeExprImpl();
    return timeExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeInterval createTimeInterval()
  {
    TimeIntervalImpl timeInterval = new TimeIntervalImpl();
    return timeInterval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CPUFrequency createCPUFrequency()
  {
    CPUFrequencyImpl cpuFrequency = new CPUFrequencyImpl();
    return cpuFrequency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiskSize createDiskSize()
  {
    DiskSizeImpl diskSize = new DiskSizeImpl();
    return diskSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RamSize createRamSize()
  {
    RamSizeImpl ramSize = new RamSizeImpl();
    return ramSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IPAddress createIPAddress()
  {
    IPAddressImpl ipAddress = new IPAddressImpl();
    return ipAddress;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IPRangeA createIPRangeA()
  {
    IPRangeAImpl ipRangeA = new IPRangeAImpl();
    return ipRangeA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndOr createAndOr()
  {
    AndOrImpl andOr = new AndOrImpl();
    return andOr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CPU createCPU()
  {
    CPUImpl cpu = new CPUImpl();
    return cpu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Disk createDisk()
  {
    DiskImpl disk = new DiskImpl();
    return disk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ram createRam()
  {
    RamImpl ram = new RamImpl();
    return ram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Flavour createFlavour()
  {
    FlavourImpl flavour = new FlavourImpl();
    return flavour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IP createIP()
  {
    IPImpl ip = new IPImpl();
    return ip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OS createOS()
  {
    OSImpl os = new OSImpl();
    return os;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OSFamily createOSFamily()
  {
    OSFamilyImpl osFamily = new OSFamilyImpl();
    return osFamily;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IPRange createIPRange()
  {
    IPRangeImpl ipRange = new IPRangeImpl();
    return ipRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Gateway createGateway()
  {
    GatewayImpl gateway = new GatewayImpl();
    return gateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public At createAt()
  {
    AtImpl at = new AtImpl();
    return at;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Switch createSwitch()
  {
    SwitchImpl switch_ = new SwitchImpl();
    return switch_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlusMinus createPlusMinus()
  {
    PlusMinusImpl plusMinus = new PlusMinusImpl();
    return plusMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IPOperation createIPOperationFromString(EDataType eDataType, String initialValue)
  {
    IPOperation result = IPOperation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIPOperationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HardwareProfile createHardwareProfileFromString(EDataType eDataType, String initialValue)
  {
    HardwareProfile result = HardwareProfile.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertHardwareProfileToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VsdlPackage getVsdlPackage()
  {
    return (VsdlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static VsdlPackage getPackage()
  {
    return VsdlPackage.eINSTANCE;
  }

} //VsdlFactoryImpl

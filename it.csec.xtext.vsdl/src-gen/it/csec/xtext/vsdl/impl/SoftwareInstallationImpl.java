/**
 * generated by Xtext 2.35.0
 */
package it.csec.xtext.vsdl.impl;

import it.csec.xtext.vsdl.ConfigOptions;
import it.csec.xtext.vsdl.SoftwareDependency;
import it.csec.xtext.vsdl.SoftwareInstallation;
import it.csec.xtext.vsdl.VsdlPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Software Installation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.csec.xtext.vsdl.impl.SoftwareInstallationImpl#getSoftwareID <em>Software ID</em>}</li>
 *   <li>{@link it.csec.xtext.vsdl.impl.SoftwareInstallationImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link it.csec.xtext.vsdl.impl.SoftwareInstallationImpl#getDependencies <em>Dependencies</em>}</li>
 *   <li>{@link it.csec.xtext.vsdl.impl.SoftwareInstallationImpl#getConfig <em>Config</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SoftwareInstallationImpl extends MinimalEObjectImpl.Container implements SoftwareInstallation
{
  /**
   * The default value of the '{@link #getSoftwareID() <em>Software ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSoftwareID()
   * @generated
   * @ordered
   */
  protected static final String SOFTWARE_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSoftwareID() <em>Software ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSoftwareID()
   * @generated
   * @ordered
   */
  protected String softwareID = SOFTWARE_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected static final String VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected String version = VERSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getDependencies() <em>Dependencies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDependencies()
   * @generated
   * @ordered
   */
  protected EList<SoftwareDependency> dependencies;

  /**
   * The cached value of the '{@link #getConfig() <em>Config</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfig()
   * @generated
   * @ordered
   */
  protected ConfigOptions config;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SoftwareInstallationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VsdlPackage.Literals.SOFTWARE_INSTALLATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSoftwareID()
  {
    return softwareID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSoftwareID(String newSoftwareID)
  {
    String oldSoftwareID = softwareID;
    softwareID = newSoftwareID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.SOFTWARE_INSTALLATION__SOFTWARE_ID, oldSoftwareID, softwareID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(String newVersion)
  {
    String oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.SOFTWARE_INSTALLATION__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SoftwareDependency> getDependencies()
  {
    if (dependencies == null)
    {
      dependencies = new EObjectContainmentEList<SoftwareDependency>(SoftwareDependency.class, this, VsdlPackage.SOFTWARE_INSTALLATION__DEPENDENCIES);
    }
    return dependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigOptions getConfig()
  {
    return config;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConfig(ConfigOptions newConfig, NotificationChain msgs)
  {
    ConfigOptions oldConfig = config;
    config = newConfig;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VsdlPackage.SOFTWARE_INSTALLATION__CONFIG, oldConfig, newConfig);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConfig(ConfigOptions newConfig)
  {
    if (newConfig != config)
    {
      NotificationChain msgs = null;
      if (config != null)
        msgs = ((InternalEObject)config).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.SOFTWARE_INSTALLATION__CONFIG, null, msgs);
      if (newConfig != null)
        msgs = ((InternalEObject)newConfig).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.SOFTWARE_INSTALLATION__CONFIG, null, msgs);
      msgs = basicSetConfig(newConfig, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.SOFTWARE_INSTALLATION__CONFIG, newConfig, newConfig));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VsdlPackage.SOFTWARE_INSTALLATION__DEPENDENCIES:
        return ((InternalEList<?>)getDependencies()).basicRemove(otherEnd, msgs);
      case VsdlPackage.SOFTWARE_INSTALLATION__CONFIG:
        return basicSetConfig(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VsdlPackage.SOFTWARE_INSTALLATION__SOFTWARE_ID:
        return getSoftwareID();
      case VsdlPackage.SOFTWARE_INSTALLATION__VERSION:
        return getVersion();
      case VsdlPackage.SOFTWARE_INSTALLATION__DEPENDENCIES:
        return getDependencies();
      case VsdlPackage.SOFTWARE_INSTALLATION__CONFIG:
        return getConfig();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VsdlPackage.SOFTWARE_INSTALLATION__SOFTWARE_ID:
        setSoftwareID((String)newValue);
        return;
      case VsdlPackage.SOFTWARE_INSTALLATION__VERSION:
        setVersion((String)newValue);
        return;
      case VsdlPackage.SOFTWARE_INSTALLATION__DEPENDENCIES:
        getDependencies().clear();
        getDependencies().addAll((Collection<? extends SoftwareDependency>)newValue);
        return;
      case VsdlPackage.SOFTWARE_INSTALLATION__CONFIG:
        setConfig((ConfigOptions)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VsdlPackage.SOFTWARE_INSTALLATION__SOFTWARE_ID:
        setSoftwareID(SOFTWARE_ID_EDEFAULT);
        return;
      case VsdlPackage.SOFTWARE_INSTALLATION__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
      case VsdlPackage.SOFTWARE_INSTALLATION__DEPENDENCIES:
        getDependencies().clear();
        return;
      case VsdlPackage.SOFTWARE_INSTALLATION__CONFIG:
        setConfig((ConfigOptions)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VsdlPackage.SOFTWARE_INSTALLATION__SOFTWARE_ID:
        return SOFTWARE_ID_EDEFAULT == null ? softwareID != null : !SOFTWARE_ID_EDEFAULT.equals(softwareID);
      case VsdlPackage.SOFTWARE_INSTALLATION__VERSION:
        return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
      case VsdlPackage.SOFTWARE_INSTALLATION__DEPENDENCIES:
        return dependencies != null && !dependencies.isEmpty();
      case VsdlPackage.SOFTWARE_INSTALLATION__CONFIG:
        return config != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (softwareID: ");
    result.append(softwareID);
    result.append(", version: ");
    result.append(version);
    result.append(')');
    return result.toString();
  }

} //SoftwareInstallationImpl

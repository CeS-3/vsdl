/**
 * generated by Xtext 2.35.0
 */
package it.csec.xtext.vsdl.impl;

import it.csec.xtext.vsdl.NodeConstraint;
import it.csec.xtext.vsdl.SoftwareInstallation;
import it.csec.xtext.vsdl.UpdateTriggerConstraint;
import it.csec.xtext.vsdl.VsdlPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.csec.xtext.vsdl.impl.NodeConstraintImpl#getTriggerconstraint <em>Triggerconstraint</em>}</li>
 *   <li>{@link it.csec.xtext.vsdl.impl.NodeConstraintImpl#getNodeconstraint <em>Nodeconstraint</em>}</li>
 *   <li>{@link it.csec.xtext.vsdl.impl.NodeConstraintImpl#getSoftware <em>Software</em>}</li>
 *   <li>{@link it.csec.xtext.vsdl.impl.NodeConstraintImpl#getVulnID <em>Vuln ID</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeConstraintImpl extends MinimalEObjectImpl.Container implements NodeConstraint
{
  /**
   * The cached value of the '{@link #getTriggerconstraint() <em>Triggerconstraint</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTriggerconstraint()
   * @generated
   * @ordered
   */
  protected UpdateTriggerConstraint triggerconstraint;

  /**
   * The cached value of the '{@link #getNodeconstraint() <em>Nodeconstraint</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeconstraint()
   * @generated
   * @ordered
   */
  protected NodeConstraint nodeconstraint;

  /**
   * The cached value of the '{@link #getSoftware() <em>Software</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSoftware()
   * @generated
   * @ordered
   */
  protected SoftwareInstallation software;

  /**
   * The default value of the '{@link #getVulnID() <em>Vuln ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVulnID()
   * @generated
   * @ordered
   */
  protected static final String VULN_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVulnID() <em>Vuln ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVulnID()
   * @generated
   * @ordered
   */
  protected String vulnID = VULN_ID_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VsdlPackage.Literals.NODE_CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateTriggerConstraint getTriggerconstraint()
  {
    return triggerconstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTriggerconstraint(UpdateTriggerConstraint newTriggerconstraint, NotificationChain msgs)
  {
    UpdateTriggerConstraint oldTriggerconstraint = triggerconstraint;
    triggerconstraint = newTriggerconstraint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VsdlPackage.NODE_CONSTRAINT__TRIGGERCONSTRAINT, oldTriggerconstraint, newTriggerconstraint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTriggerconstraint(UpdateTriggerConstraint newTriggerconstraint)
  {
    if (newTriggerconstraint != triggerconstraint)
    {
      NotificationChain msgs = null;
      if (triggerconstraint != null)
        msgs = ((InternalEObject)triggerconstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NODE_CONSTRAINT__TRIGGERCONSTRAINT, null, msgs);
      if (newTriggerconstraint != null)
        msgs = ((InternalEObject)newTriggerconstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NODE_CONSTRAINT__TRIGGERCONSTRAINT, null, msgs);
      msgs = basicSetTriggerconstraint(newTriggerconstraint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.NODE_CONSTRAINT__TRIGGERCONSTRAINT, newTriggerconstraint, newTriggerconstraint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeConstraint getNodeconstraint()
  {
    return nodeconstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNodeconstraint(NodeConstraint newNodeconstraint, NotificationChain msgs)
  {
    NodeConstraint oldNodeconstraint = nodeconstraint;
    nodeconstraint = newNodeconstraint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VsdlPackage.NODE_CONSTRAINT__NODECONSTRAINT, oldNodeconstraint, newNodeconstraint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeconstraint(NodeConstraint newNodeconstraint)
  {
    if (newNodeconstraint != nodeconstraint)
    {
      NotificationChain msgs = null;
      if (nodeconstraint != null)
        msgs = ((InternalEObject)nodeconstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NODE_CONSTRAINT__NODECONSTRAINT, null, msgs);
      if (newNodeconstraint != null)
        msgs = ((InternalEObject)newNodeconstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NODE_CONSTRAINT__NODECONSTRAINT, null, msgs);
      msgs = basicSetNodeconstraint(newNodeconstraint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.NODE_CONSTRAINT__NODECONSTRAINT, newNodeconstraint, newNodeconstraint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoftwareInstallation getSoftware()
  {
    return software;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSoftware(SoftwareInstallation newSoftware, NotificationChain msgs)
  {
    SoftwareInstallation oldSoftware = software;
    software = newSoftware;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VsdlPackage.NODE_CONSTRAINT__SOFTWARE, oldSoftware, newSoftware);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSoftware(SoftwareInstallation newSoftware)
  {
    if (newSoftware != software)
    {
      NotificationChain msgs = null;
      if (software != null)
        msgs = ((InternalEObject)software).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NODE_CONSTRAINT__SOFTWARE, null, msgs);
      if (newSoftware != null)
        msgs = ((InternalEObject)newSoftware).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NODE_CONSTRAINT__SOFTWARE, null, msgs);
      msgs = basicSetSoftware(newSoftware, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.NODE_CONSTRAINT__SOFTWARE, newSoftware, newSoftware));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVulnID()
  {
    return vulnID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVulnID(String newVulnID)
  {
    String oldVulnID = vulnID;
    vulnID = newVulnID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.NODE_CONSTRAINT__VULN_ID, oldVulnID, vulnID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VsdlPackage.NODE_CONSTRAINT__TRIGGERCONSTRAINT:
        return basicSetTriggerconstraint(null, msgs);
      case VsdlPackage.NODE_CONSTRAINT__NODECONSTRAINT:
        return basicSetNodeconstraint(null, msgs);
      case VsdlPackage.NODE_CONSTRAINT__SOFTWARE:
        return basicSetSoftware(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VsdlPackage.NODE_CONSTRAINT__TRIGGERCONSTRAINT:
        return getTriggerconstraint();
      case VsdlPackage.NODE_CONSTRAINT__NODECONSTRAINT:
        return getNodeconstraint();
      case VsdlPackage.NODE_CONSTRAINT__SOFTWARE:
        return getSoftware();
      case VsdlPackage.NODE_CONSTRAINT__VULN_ID:
        return getVulnID();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VsdlPackage.NODE_CONSTRAINT__TRIGGERCONSTRAINT:
        setTriggerconstraint((UpdateTriggerConstraint)newValue);
        return;
      case VsdlPackage.NODE_CONSTRAINT__NODECONSTRAINT:
        setNodeconstraint((NodeConstraint)newValue);
        return;
      case VsdlPackage.NODE_CONSTRAINT__SOFTWARE:
        setSoftware((SoftwareInstallation)newValue);
        return;
      case VsdlPackage.NODE_CONSTRAINT__VULN_ID:
        setVulnID((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VsdlPackage.NODE_CONSTRAINT__TRIGGERCONSTRAINT:
        setTriggerconstraint((UpdateTriggerConstraint)null);
        return;
      case VsdlPackage.NODE_CONSTRAINT__NODECONSTRAINT:
        setNodeconstraint((NodeConstraint)null);
        return;
      case VsdlPackage.NODE_CONSTRAINT__SOFTWARE:
        setSoftware((SoftwareInstallation)null);
        return;
      case VsdlPackage.NODE_CONSTRAINT__VULN_ID:
        setVulnID(VULN_ID_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VsdlPackage.NODE_CONSTRAINT__TRIGGERCONSTRAINT:
        return triggerconstraint != null;
      case VsdlPackage.NODE_CONSTRAINT__NODECONSTRAINT:
        return nodeconstraint != null;
      case VsdlPackage.NODE_CONSTRAINT__SOFTWARE:
        return software != null;
      case VsdlPackage.NODE_CONSTRAINT__VULN_ID:
        return VULN_ID_EDEFAULT == null ? vulnID != null : !VULN_ID_EDEFAULT.equals(vulnID);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (vulnID: ");
    result.append(vulnID);
    result.append(')');
    return result.toString();
  }

} //NodeConstraintImpl

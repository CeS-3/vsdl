/**
 * generated by Xtext 2.35.0
 */
package it.csec.xtext.vsdl.impl;

import it.csec.xtext.vsdl.NetworkConstraint;
import it.csec.xtext.vsdl.Not;
import it.csec.xtext.vsdl.UpdateTriggerConstraint;
import it.csec.xtext.vsdl.VsdlPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Not</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.csec.xtext.vsdl.impl.NotImpl#getNetworktriggerconstraint <em>Networktriggerconstraint</em>}</li>
 *   <li>{@link it.csec.xtext.vsdl.impl.NotImpl#getNetworkconstraint <em>Networkconstraint</em>}</li>
 *   <li>{@link it.csec.xtext.vsdl.impl.NotImpl#getConstraint <em>Constraint</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NotImpl extends NodeConstraintImpl implements Not
{
  /**
   * The cached value of the '{@link #getNetworktriggerconstraint() <em>Networktriggerconstraint</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNetworktriggerconstraint()
   * @generated
   * @ordered
   */
  protected UpdateTriggerConstraint networktriggerconstraint;

  /**
   * The cached value of the '{@link #getNetworkconstraint() <em>Networkconstraint</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNetworkconstraint()
   * @generated
   * @ordered
   */
  protected NetworkConstraint networkconstraint;

  /**
   * The cached value of the '{@link #getConstraint() <em>Constraint</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraint()
   * @generated
   * @ordered
   */
  protected EObject constraint;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NotImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VsdlPackage.Literals.NOT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateTriggerConstraint getNetworktriggerconstraint()
  {
    return networktriggerconstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNetworktriggerconstraint(UpdateTriggerConstraint newNetworktriggerconstraint, NotificationChain msgs)
  {
    UpdateTriggerConstraint oldNetworktriggerconstraint = networktriggerconstraint;
    networktriggerconstraint = newNetworktriggerconstraint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT, oldNetworktriggerconstraint, newNetworktriggerconstraint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNetworktriggerconstraint(UpdateTriggerConstraint newNetworktriggerconstraint)
  {
    if (newNetworktriggerconstraint != networktriggerconstraint)
    {
      NotificationChain msgs = null;
      if (networktriggerconstraint != null)
        msgs = ((InternalEObject)networktriggerconstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT, null, msgs);
      if (newNetworktriggerconstraint != null)
        msgs = ((InternalEObject)newNetworktriggerconstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT, null, msgs);
      msgs = basicSetNetworktriggerconstraint(newNetworktriggerconstraint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT, newNetworktriggerconstraint, newNetworktriggerconstraint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NetworkConstraint getNetworkconstraint()
  {
    return networkconstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNetworkconstraint(NetworkConstraint newNetworkconstraint, NotificationChain msgs)
  {
    NetworkConstraint oldNetworkconstraint = networkconstraint;
    networkconstraint = newNetworkconstraint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VsdlPackage.NOT__NETWORKCONSTRAINT, oldNetworkconstraint, newNetworkconstraint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNetworkconstraint(NetworkConstraint newNetworkconstraint)
  {
    if (newNetworkconstraint != networkconstraint)
    {
      NotificationChain msgs = null;
      if (networkconstraint != null)
        msgs = ((InternalEObject)networkconstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NOT__NETWORKCONSTRAINT, null, msgs);
      if (newNetworkconstraint != null)
        msgs = ((InternalEObject)newNetworkconstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NOT__NETWORKCONSTRAINT, null, msgs);
      msgs = basicSetNetworkconstraint(newNetworkconstraint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.NOT__NETWORKCONSTRAINT, newNetworkconstraint, newNetworkconstraint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getConstraint()
  {
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraint(EObject newConstraint, NotificationChain msgs)
  {
    EObject oldConstraint = constraint;
    constraint = newConstraint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VsdlPackage.NOT__CONSTRAINT, oldConstraint, newConstraint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraint(EObject newConstraint)
  {
    if (newConstraint != constraint)
    {
      NotificationChain msgs = null;
      if (constraint != null)
        msgs = ((InternalEObject)constraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NOT__CONSTRAINT, null, msgs);
      if (newConstraint != null)
        msgs = ((InternalEObject)newConstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VsdlPackage.NOT__CONSTRAINT, null, msgs);
      msgs = basicSetConstraint(newConstraint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VsdlPackage.NOT__CONSTRAINT, newConstraint, newConstraint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT:
        return basicSetNetworktriggerconstraint(null, msgs);
      case VsdlPackage.NOT__NETWORKCONSTRAINT:
        return basicSetNetworkconstraint(null, msgs);
      case VsdlPackage.NOT__CONSTRAINT:
        return basicSetConstraint(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT:
        return getNetworktriggerconstraint();
      case VsdlPackage.NOT__NETWORKCONSTRAINT:
        return getNetworkconstraint();
      case VsdlPackage.NOT__CONSTRAINT:
        return getConstraint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT:
        setNetworktriggerconstraint((UpdateTriggerConstraint)newValue);
        return;
      case VsdlPackage.NOT__NETWORKCONSTRAINT:
        setNetworkconstraint((NetworkConstraint)newValue);
        return;
      case VsdlPackage.NOT__CONSTRAINT:
        setConstraint((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT:
        setNetworktriggerconstraint((UpdateTriggerConstraint)null);
        return;
      case VsdlPackage.NOT__NETWORKCONSTRAINT:
        setNetworkconstraint((NetworkConstraint)null);
        return;
      case VsdlPackage.NOT__CONSTRAINT:
        setConstraint((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT:
        return networktriggerconstraint != null;
      case VsdlPackage.NOT__NETWORKCONSTRAINT:
        return networkconstraint != null;
      case VsdlPackage.NOT__CONSTRAINT:
        return constraint != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == NetworkConstraint.class)
    {
      switch (derivedFeatureID)
      {
        case VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT: return VsdlPackage.NETWORK_CONSTRAINT__NETWORKTRIGGERCONSTRAINT;
        case VsdlPackage.NOT__NETWORKCONSTRAINT: return VsdlPackage.NETWORK_CONSTRAINT__NETWORKCONSTRAINT;
        default: return -1;
      }
    }
    if (baseClass == UpdateTriggerConstraint.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == NetworkConstraint.class)
    {
      switch (baseFeatureID)
      {
        case VsdlPackage.NETWORK_CONSTRAINT__NETWORKTRIGGERCONSTRAINT: return VsdlPackage.NOT__NETWORKTRIGGERCONSTRAINT;
        case VsdlPackage.NETWORK_CONSTRAINT__NETWORKCONSTRAINT: return VsdlPackage.NOT__NETWORKCONSTRAINT;
        default: return -1;
      }
    }
    if (baseClass == UpdateTriggerConstraint.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //NotImpl

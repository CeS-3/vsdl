/**
 * generated by Xtext 2.35.0
 */
package it.csec.xtext.vsdl.impl;

import it.csec.xtext.vsdl.AndOr;
import it.csec.xtext.vsdl.At;
import it.csec.xtext.vsdl.CPUFrequency;
import it.csec.xtext.vsdl.ConfigOptions;
import it.csec.xtext.vsdl.ConfigPair;
import it.csec.xtext.vsdl.Disk;
import it.csec.xtext.vsdl.DiskSize;
import it.csec.xtext.vsdl.Flavour;
import it.csec.xtext.vsdl.Gateway;
import it.csec.xtext.vsdl.HardwareProfile;
import it.csec.xtext.vsdl.IPAddress;
import it.csec.xtext.vsdl.IPOperation;
import it.csec.xtext.vsdl.IPRange;
import it.csec.xtext.vsdl.IPRangeA;
import it.csec.xtext.vsdl.Model;
import it.csec.xtext.vsdl.Multiplication;
import it.csec.xtext.vsdl.Network;
import it.csec.xtext.vsdl.NetworkConstraint;
import it.csec.xtext.vsdl.Node;
import it.csec.xtext.vsdl.NodeConstraint;
import it.csec.xtext.vsdl.Not;
import it.csec.xtext.vsdl.OSFamily;
import it.csec.xtext.vsdl.PlusMinus;
import it.csec.xtext.vsdl.Ram;
import it.csec.xtext.vsdl.RamSize;
import it.csec.xtext.vsdl.ScenElem;
import it.csec.xtext.vsdl.SoftwareDependency;
import it.csec.xtext.vsdl.SoftwareInstallation;
import it.csec.xtext.vsdl.Switch;
import it.csec.xtext.vsdl.TimeExpr;
import it.csec.xtext.vsdl.TimeInterval;
import it.csec.xtext.vsdl.UpdateTriggerConstraint;
import it.csec.xtext.vsdl.VsdlFactory;
import it.csec.xtext.vsdl.VsdlPackage;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class VsdlPackageImpl extends EPackageImpl implements VsdlPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scenElemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodeConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass softwareInstallationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass softwareDependencyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configOptionsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configPairEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass networkEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass networkConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass updateTriggerConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass timeExprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass timeIntervalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cpuFrequencyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskSizeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ramSizeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ipAddressEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ipRangeAEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass andOrEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cpuEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass flavourEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ipEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass osEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass osFamilyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ipRangeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass gatewayEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass atEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass switchEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass plusMinusEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiplicationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum ipOperationEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum hardwareProfileEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see it.csec.xtext.vsdl.VsdlPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private VsdlPackageImpl()
  {
    super(eNS_URI, VsdlFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link VsdlPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static VsdlPackage init()
  {
    if (isInited) return (VsdlPackage)EPackage.Registry.INSTANCE.getEPackage(VsdlPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredVsdlPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    VsdlPackageImpl theVsdlPackage = registeredVsdlPackage instanceof VsdlPackageImpl ? (VsdlPackageImpl)registeredVsdlPackage : new VsdlPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theVsdlPackage.createPackageContents();

    // Initialize created meta-data
    theVsdlPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theVsdlPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(VsdlPackage.eNS_URI, theVsdlPackage);
    return theVsdlPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getModel_Name()
  {
    return (EAttribute)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_TimeToUse()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Elements()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getScenElem()
  {
    return scenElemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getScenElem_Name()
  {
    return (EAttribute)scenElemEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNode()
  {
    return nodeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNode_Constraints()
  {
    return (EReference)nodeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNodeConstraint()
  {
    return nodeConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNodeConstraint_Triggerconstraint()
  {
    return (EReference)nodeConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNodeConstraint_Nodeconstraint()
  {
    return (EReference)nodeConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNodeConstraint_Software()
  {
    return (EReference)nodeConstraintEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNodeConstraint_VulnID()
  {
    return (EAttribute)nodeConstraintEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSoftwareInstallation()
  {
    return softwareInstallationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSoftwareInstallation_SoftwareID()
  {
    return (EAttribute)softwareInstallationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSoftwareInstallation_Version()
  {
    return (EAttribute)softwareInstallationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSoftwareInstallation_Dependencies()
  {
    return (EReference)softwareInstallationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSoftwareInstallation_Config()
  {
    return (EReference)softwareInstallationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSoftwareDependency()
  {
    return softwareDependencyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSoftwareDependency_DependencyID()
  {
    return (EAttribute)softwareDependencyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfigOptions()
  {
    return configOptionsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfigOptions_ConfigPairs()
  {
    return (EReference)configOptionsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfigPair()
  {
    return configPairEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigPair_Key()
  {
    return (EAttribute)configPairEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigPair_Value()
  {
    return (EAttribute)configPairEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNetwork()
  {
    return networkEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNetwork_Constraints()
  {
    return (EReference)networkEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNetworkConstraint()
  {
    return networkConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNetworkConstraint_Networktriggerconstraint()
  {
    return (EReference)networkConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNetworkConstraint_Networkconstraint()
  {
    return (EReference)networkConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNetworkConstraint_Id()
  {
    return (EReference)networkConstraintEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNetworkConstraint_Op()
  {
    return (EAttribute)networkConstraintEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNetworkConstraint_Ip()
  {
    return (EReference)networkConstraintEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUpdateTriggerConstraint()
  {
    return updateTriggerConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTimeExpr()
  {
    return timeExprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTimeExpr_Variable()
  {
    return (EAttribute)timeExprEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTimeExpr_Interval()
  {
    return (EReference)timeExprEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTimeExpr_Left()
  {
    return (EReference)timeExprEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTimeExpr_Op()
  {
    return (EAttribute)timeExprEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTimeExpr_Right()
  {
    return (EReference)timeExprEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTimeInterval()
  {
    return timeIntervalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTimeInterval_Value()
  {
    return (EAttribute)timeIntervalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCPUFrequency()
  {
    return cpuFrequencyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCPUFrequency_Value()
  {
    return (EAttribute)cpuFrequencyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCPUFrequency_Unit()
  {
    return (EAttribute)cpuFrequencyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskSize()
  {
    return diskSizeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskSize_Value()
  {
    return (EAttribute)diskSizeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskSize_Unit()
  {
    return (EAttribute)diskSizeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRamSize()
  {
    return ramSizeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRamSize_Value()
  {
    return (EAttribute)ramSizeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRamSize_Unit()
  {
    return (EAttribute)ramSizeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIPAddress()
  {
    return ipAddressEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIPAddress_Octet1()
  {
    return (EAttribute)ipAddressEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIPAddress_Octet2()
  {
    return (EAttribute)ipAddressEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIPAddress_Octet3()
  {
    return (EAttribute)ipAddressEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIPAddress_Octet4()
  {
    return (EAttribute)ipAddressEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIPRangeA()
  {
    return ipRangeAEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIPRangeA_Address()
  {
    return (EReference)ipRangeAEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIPRangeA_Bitmask()
  {
    return (EAttribute)ipRangeAEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAndOr()
  {
    return andOrEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAndOr_Left()
  {
    return (EReference)andOrEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAndOr_Right()
  {
    return (EReference)andOrEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNot()
  {
    return notEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNot_Constraint()
  {
    return (EReference)notEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCPU()
  {
    return cpuEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCPU_Op()
  {
    return (EAttribute)cpuEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCPU_Value()
  {
    return (EReference)cpuEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCPU_Sameas()
  {
    return (EAttribute)cpuEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCPU_Id()
  {
    return (EReference)cpuEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDisk()
  {
    return diskEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDisk_Op()
  {
    return (EAttribute)diskEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDisk_Value()
  {
    return (EReference)diskEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDisk_Sameas()
  {
    return (EAttribute)diskEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDisk_Id()
  {
    return (EReference)diskEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRam()
  {
    return ramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRam_Op()
  {
    return (EAttribute)ramEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRam_Value()
  {
    return (EReference)ramEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRam_Sameas()
  {
    return (EAttribute)ramEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRam_Id()
  {
    return (EReference)ramEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFlavour()
  {
    return flavourEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFlavour_Profile()
  {
    return (EAttribute)flavourEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIP()
  {
    return ipEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIP_Op()
  {
    return (EAttribute)ipEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIP_IpAddress()
  {
    return (EReference)ipEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIP_IpRange()
  {
    return (EReference)ipEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIP_Sameas()
  {
    return (EAttribute)ipEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIP_Id()
  {
    return (EReference)ipEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIP_Ip()
  {
    return (EReference)ipEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOS()
  {
    return osEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOS_Version()
  {
    return (EAttribute)osEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOSFamily()
  {
    return osFamilyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOSFamily_Family()
  {
    return (EAttribute)osFamilyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIPRange()
  {
    return ipRangeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIPRange_Range()
  {
    return (EReference)ipRangeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGateway()
  {
    return gatewayEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGateway_Internet()
  {
    return (EAttribute)gatewayEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAt()
  {
    return atEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAt_Op()
  {
    return (EAttribute)atEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAt_Variable()
  {
    return (EAttribute)atEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAt_Texp()
  {
    return (EReference)atEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSwitch()
  {
    return switchEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSwitch_Variable()
  {
    return (EAttribute)switchEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSwitch_Texp()
  {
    return (EReference)switchEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPlusMinus()
  {
    return plusMinusEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMultiplication()
  {
    return multiplicationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getIPOperation()
  {
    return ipOperationEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getHardwareProfile()
  {
    return hardwareProfileEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VsdlFactory getVsdlFactory()
  {
    return (VsdlFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEAttribute(modelEClass, MODEL__NAME);
    createEReference(modelEClass, MODEL__TIME_TO_USE);
    createEReference(modelEClass, MODEL__ELEMENTS);

    scenElemEClass = createEClass(SCEN_ELEM);
    createEAttribute(scenElemEClass, SCEN_ELEM__NAME);

    nodeEClass = createEClass(NODE);
    createEReference(nodeEClass, NODE__CONSTRAINTS);

    nodeConstraintEClass = createEClass(NODE_CONSTRAINT);
    createEReference(nodeConstraintEClass, NODE_CONSTRAINT__TRIGGERCONSTRAINT);
    createEReference(nodeConstraintEClass, NODE_CONSTRAINT__NODECONSTRAINT);
    createEReference(nodeConstraintEClass, NODE_CONSTRAINT__SOFTWARE);
    createEAttribute(nodeConstraintEClass, NODE_CONSTRAINT__VULN_ID);

    softwareInstallationEClass = createEClass(SOFTWARE_INSTALLATION);
    createEAttribute(softwareInstallationEClass, SOFTWARE_INSTALLATION__SOFTWARE_ID);
    createEAttribute(softwareInstallationEClass, SOFTWARE_INSTALLATION__VERSION);
    createEReference(softwareInstallationEClass, SOFTWARE_INSTALLATION__DEPENDENCIES);
    createEReference(softwareInstallationEClass, SOFTWARE_INSTALLATION__CONFIG);

    softwareDependencyEClass = createEClass(SOFTWARE_DEPENDENCY);
    createEAttribute(softwareDependencyEClass, SOFTWARE_DEPENDENCY__DEPENDENCY_ID);

    configOptionsEClass = createEClass(CONFIG_OPTIONS);
    createEReference(configOptionsEClass, CONFIG_OPTIONS__CONFIG_PAIRS);

    configPairEClass = createEClass(CONFIG_PAIR);
    createEAttribute(configPairEClass, CONFIG_PAIR__KEY);
    createEAttribute(configPairEClass, CONFIG_PAIR__VALUE);

    networkEClass = createEClass(NETWORK);
    createEReference(networkEClass, NETWORK__CONSTRAINTS);

    networkConstraintEClass = createEClass(NETWORK_CONSTRAINT);
    createEReference(networkConstraintEClass, NETWORK_CONSTRAINT__NETWORKTRIGGERCONSTRAINT);
    createEReference(networkConstraintEClass, NETWORK_CONSTRAINT__NETWORKCONSTRAINT);
    createEReference(networkConstraintEClass, NETWORK_CONSTRAINT__ID);
    createEAttribute(networkConstraintEClass, NETWORK_CONSTRAINT__OP);
    createEReference(networkConstraintEClass, NETWORK_CONSTRAINT__IP);

    updateTriggerConstraintEClass = createEClass(UPDATE_TRIGGER_CONSTRAINT);

    timeExprEClass = createEClass(TIME_EXPR);
    createEAttribute(timeExprEClass, TIME_EXPR__VARIABLE);
    createEReference(timeExprEClass, TIME_EXPR__INTERVAL);
    createEReference(timeExprEClass, TIME_EXPR__LEFT);
    createEAttribute(timeExprEClass, TIME_EXPR__OP);
    createEReference(timeExprEClass, TIME_EXPR__RIGHT);

    timeIntervalEClass = createEClass(TIME_INTERVAL);
    createEAttribute(timeIntervalEClass, TIME_INTERVAL__VALUE);

    cpuFrequencyEClass = createEClass(CPU_FREQUENCY);
    createEAttribute(cpuFrequencyEClass, CPU_FREQUENCY__VALUE);
    createEAttribute(cpuFrequencyEClass, CPU_FREQUENCY__UNIT);

    diskSizeEClass = createEClass(DISK_SIZE);
    createEAttribute(diskSizeEClass, DISK_SIZE__VALUE);
    createEAttribute(diskSizeEClass, DISK_SIZE__UNIT);

    ramSizeEClass = createEClass(RAM_SIZE);
    createEAttribute(ramSizeEClass, RAM_SIZE__VALUE);
    createEAttribute(ramSizeEClass, RAM_SIZE__UNIT);

    ipAddressEClass = createEClass(IP_ADDRESS);
    createEAttribute(ipAddressEClass, IP_ADDRESS__OCTET1);
    createEAttribute(ipAddressEClass, IP_ADDRESS__OCTET2);
    createEAttribute(ipAddressEClass, IP_ADDRESS__OCTET3);
    createEAttribute(ipAddressEClass, IP_ADDRESS__OCTET4);

    ipRangeAEClass = createEClass(IP_RANGE_A);
    createEReference(ipRangeAEClass, IP_RANGE_A__ADDRESS);
    createEAttribute(ipRangeAEClass, IP_RANGE_A__BITMASK);

    andOrEClass = createEClass(AND_OR);
    createEReference(andOrEClass, AND_OR__LEFT);
    createEReference(andOrEClass, AND_OR__RIGHT);

    notEClass = createEClass(NOT);
    createEReference(notEClass, NOT__CONSTRAINT);

    cpuEClass = createEClass(CPU);
    createEAttribute(cpuEClass, CPU__OP);
    createEReference(cpuEClass, CPU__VALUE);
    createEAttribute(cpuEClass, CPU__SAMEAS);
    createEReference(cpuEClass, CPU__ID);

    diskEClass = createEClass(DISK);
    createEAttribute(diskEClass, DISK__OP);
    createEReference(diskEClass, DISK__VALUE);
    createEAttribute(diskEClass, DISK__SAMEAS);
    createEReference(diskEClass, DISK__ID);

    ramEClass = createEClass(RAM);
    createEAttribute(ramEClass, RAM__OP);
    createEReference(ramEClass, RAM__VALUE);
    createEAttribute(ramEClass, RAM__SAMEAS);
    createEReference(ramEClass, RAM__ID);

    flavourEClass = createEClass(FLAVOUR);
    createEAttribute(flavourEClass, FLAVOUR__PROFILE);

    ipEClass = createEClass(IP);
    createEAttribute(ipEClass, IP__OP);
    createEReference(ipEClass, IP__IP_ADDRESS);
    createEReference(ipEClass, IP__IP_RANGE);
    createEAttribute(ipEClass, IP__SAMEAS);
    createEReference(ipEClass, IP__ID);
    createEReference(ipEClass, IP__IP);

    osEClass = createEClass(OS);
    createEAttribute(osEClass, OS__VERSION);

    osFamilyEClass = createEClass(OS_FAMILY);
    createEAttribute(osFamilyEClass, OS_FAMILY__FAMILY);

    ipRangeEClass = createEClass(IP_RANGE);
    createEReference(ipRangeEClass, IP_RANGE__RANGE);

    gatewayEClass = createEClass(GATEWAY);
    createEAttribute(gatewayEClass, GATEWAY__INTERNET);

    atEClass = createEClass(AT);
    createEAttribute(atEClass, AT__OP);
    createEAttribute(atEClass, AT__VARIABLE);
    createEReference(atEClass, AT__TEXP);

    switchEClass = createEClass(SWITCH);
    createEAttribute(switchEClass, SWITCH__VARIABLE);
    createEReference(switchEClass, SWITCH__TEXP);

    plusMinusEClass = createEClass(PLUS_MINUS);

    multiplicationEClass = createEClass(MULTIPLICATION);

    // Create enums
    ipOperationEEnum = createEEnum(IP_OPERATION);
    hardwareProfileEEnum = createEEnum(HARDWARE_PROFILE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    nodeEClass.getESuperTypes().add(this.getScenElem());
    networkEClass.getESuperTypes().add(this.getScenElem());
    andOrEClass.getESuperTypes().add(this.getNodeConstraint());
    andOrEClass.getESuperTypes().add(this.getNetworkConstraint());
    andOrEClass.getESuperTypes().add(this.getUpdateTriggerConstraint());
    notEClass.getESuperTypes().add(this.getNodeConstraint());
    notEClass.getESuperTypes().add(this.getNetworkConstraint());
    notEClass.getESuperTypes().add(this.getUpdateTriggerConstraint());
    cpuEClass.getESuperTypes().add(this.getNodeConstraint());
    diskEClass.getESuperTypes().add(this.getNodeConstraint());
    ramEClass.getESuperTypes().add(this.getNodeConstraint());
    flavourEClass.getESuperTypes().add(this.getNodeConstraint());
    ipEClass.getESuperTypes().add(this.getNodeConstraint());
    osEClass.getESuperTypes().add(this.getNodeConstraint());
    osFamilyEClass.getESuperTypes().add(this.getNodeConstraint());
    ipRangeEClass.getESuperTypes().add(this.getNetworkConstraint());
    gatewayEClass.getESuperTypes().add(this.getNetworkConstraint());
    atEClass.getESuperTypes().add(this.getUpdateTriggerConstraint());
    switchEClass.getESuperTypes().add(this.getUpdateTriggerConstraint());
    plusMinusEClass.getESuperTypes().add(this.getTimeExpr());
    multiplicationEClass.getESuperTypes().add(this.getTimeExpr());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getModel_Name(), ecorePackage.getEString(), "name", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_TimeToUse(), this.getTimeInterval(), null, "TimeToUse", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_Elements(), this.getScenElem(), null, "Elements", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(scenElemEClass, ScenElem.class, "ScenElem", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getScenElem_Name(), ecorePackage.getEString(), "name", null, 0, 1, ScenElem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nodeEClass, Node.class, "Node", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNode_Constraints(), this.getNodeConstraint(), null, "constraints", null, 0, -1, Node.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nodeConstraintEClass, NodeConstraint.class, "NodeConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNodeConstraint_Triggerconstraint(), this.getUpdateTriggerConstraint(), null, "triggerconstraint", null, 0, 1, NodeConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNodeConstraint_Nodeconstraint(), this.getNodeConstraint(), null, "nodeconstraint", null, 0, 1, NodeConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNodeConstraint_Software(), this.getSoftwareInstallation(), null, "software", null, 0, 1, NodeConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNodeConstraint_VulnID(), ecorePackage.getEString(), "vulnID", null, 0, 1, NodeConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(softwareInstallationEClass, SoftwareInstallation.class, "SoftwareInstallation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSoftwareInstallation_SoftwareID(), ecorePackage.getEString(), "softwareID", null, 0, 1, SoftwareInstallation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSoftwareInstallation_Version(), ecorePackage.getEString(), "version", null, 0, 1, SoftwareInstallation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSoftwareInstallation_Dependencies(), this.getSoftwareDependency(), null, "dependencies", null, 0, -1, SoftwareInstallation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSoftwareInstallation_Config(), this.getConfigOptions(), null, "config", null, 0, 1, SoftwareInstallation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(softwareDependencyEClass, SoftwareDependency.class, "SoftwareDependency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSoftwareDependency_DependencyID(), ecorePackage.getEString(), "dependencyID", null, 0, 1, SoftwareDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configOptionsEClass, ConfigOptions.class, "ConfigOptions", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConfigOptions_ConfigPairs(), this.getConfigPair(), null, "configPairs", null, 0, -1, ConfigOptions.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configPairEClass, ConfigPair.class, "ConfigPair", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConfigPair_Key(), ecorePackage.getEString(), "key", null, 0, 1, ConfigPair.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigPair_Value(), ecorePackage.getEString(), "value", null, 0, 1, ConfigPair.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(networkEClass, Network.class, "Network", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNetwork_Constraints(), this.getNetworkConstraint(), null, "constraints", null, 0, -1, Network.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(networkConstraintEClass, NetworkConstraint.class, "NetworkConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNetworkConstraint_Networktriggerconstraint(), this.getUpdateTriggerConstraint(), null, "networktriggerconstraint", null, 0, 1, NetworkConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNetworkConstraint_Networkconstraint(), this.getNetworkConstraint(), null, "networkconstraint", null, 0, 1, NetworkConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNetworkConstraint_Id(), this.getNode(), null, "id", null, 0, 1, NetworkConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNetworkConstraint_Op(), ecorePackage.getEString(), "op", null, 0, 1, NetworkConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNetworkConstraint_Ip(), this.getIPAddress(), null, "ip", null, 0, 1, NetworkConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(updateTriggerConstraintEClass, UpdateTriggerConstraint.class, "UpdateTriggerConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(timeExprEClass, TimeExpr.class, "TimeExpr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTimeExpr_Variable(), ecorePackage.getEString(), "variable", null, 0, 1, TimeExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTimeExpr_Interval(), this.getTimeInterval(), null, "interval", null, 0, 1, TimeExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTimeExpr_Left(), this.getTimeExpr(), null, "left", null, 0, 1, TimeExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTimeExpr_Op(), ecorePackage.getEString(), "op", null, 0, 1, TimeExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTimeExpr_Right(), this.getTimeExpr(), null, "right", null, 0, 1, TimeExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(timeIntervalEClass, TimeInterval.class, "TimeInterval", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTimeInterval_Value(), ecorePackage.getEInt(), "value", null, 0, 1, TimeInterval.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cpuFrequencyEClass, CPUFrequency.class, "CPUFrequency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCPUFrequency_Value(), ecorePackage.getEInt(), "value", null, 0, 1, CPUFrequency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCPUFrequency_Unit(), ecorePackage.getEString(), "unit", null, 0, 1, CPUFrequency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskSizeEClass, DiskSize.class, "DiskSize", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiskSize_Value(), ecorePackage.getEInt(), "value", null, 0, 1, DiskSize.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiskSize_Unit(), ecorePackage.getEString(), "unit", null, 0, 1, DiskSize.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ramSizeEClass, RamSize.class, "RamSize", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRamSize_Value(), ecorePackage.getEInt(), "value", null, 0, 1, RamSize.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRamSize_Unit(), ecorePackage.getEString(), "unit", null, 0, 1, RamSize.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ipAddressEClass, IPAddress.class, "IPAddress", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIPAddress_Octet1(), ecorePackage.getEInt(), "octet1", null, 0, 1, IPAddress.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIPAddress_Octet2(), ecorePackage.getEInt(), "octet2", null, 0, 1, IPAddress.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIPAddress_Octet3(), ecorePackage.getEInt(), "octet3", null, 0, 1, IPAddress.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIPAddress_Octet4(), ecorePackage.getEInt(), "octet4", null, 0, 1, IPAddress.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ipRangeAEClass, IPRangeA.class, "IPRangeA", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIPRangeA_Address(), this.getIPAddress(), null, "address", null, 0, 1, IPRangeA.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIPRangeA_Bitmask(), ecorePackage.getEInt(), "bitmask", null, 0, 1, IPRangeA.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(andOrEClass, AndOr.class, "AndOr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAndOr_Left(), ecorePackage.getEObject(), null, "left", null, 0, 1, AndOr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAndOr_Right(), ecorePackage.getEObject(), null, "right", null, 0, 1, AndOr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(notEClass, Not.class, "Not", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNot_Constraint(), ecorePackage.getEObject(), null, "constraint", null, 0, 1, Not.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cpuEClass, it.csec.xtext.vsdl.CPU.class, "CPU", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCPU_Op(), ecorePackage.getEString(), "op", null, 0, 1, it.csec.xtext.vsdl.CPU.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCPU_Value(), this.getCPUFrequency(), null, "value", null, 0, 1, it.csec.xtext.vsdl.CPU.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCPU_Sameas(), ecorePackage.getEBoolean(), "sameas", null, 0, 1, it.csec.xtext.vsdl.CPU.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCPU_Id(), this.getNode(), null, "id", null, 0, 1, it.csec.xtext.vsdl.CPU.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskEClass, Disk.class, "Disk", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDisk_Op(), ecorePackage.getEString(), "op", null, 0, 1, Disk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDisk_Value(), this.getDiskSize(), null, "value", null, 0, 1, Disk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDisk_Sameas(), ecorePackage.getEBoolean(), "sameas", null, 0, 1, Disk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDisk_Id(), this.getNode(), null, "id", null, 0, 1, Disk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ramEClass, Ram.class, "Ram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRam_Op(), ecorePackage.getEString(), "op", null, 0, 1, Ram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRam_Value(), this.getRamSize(), null, "value", null, 0, 1, Ram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRam_Sameas(), ecorePackage.getEBoolean(), "sameas", null, 0, 1, Ram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRam_Id(), this.getNode(), null, "id", null, 0, 1, Ram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(flavourEClass, Flavour.class, "Flavour", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFlavour_Profile(), this.getHardwareProfile(), "profile", null, 0, 1, Flavour.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ipEClass, it.csec.xtext.vsdl.IP.class, "IP", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIP_Op(), ecorePackage.getEString(), "op", null, 0, 1, it.csec.xtext.vsdl.IP.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIP_IpAddress(), this.getIPAddress(), null, "ipAddress", null, 0, 1, it.csec.xtext.vsdl.IP.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIP_IpRange(), this.getIPRangeA(), null, "ipRange", null, 0, 1, it.csec.xtext.vsdl.IP.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIP_Sameas(), ecorePackage.getEBoolean(), "sameas", null, 0, 1, it.csec.xtext.vsdl.IP.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIP_Id(), this.getNode(), null, "id", null, 0, 1, it.csec.xtext.vsdl.IP.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIP_Ip(), this.getIPAddress(), null, "ip", null, 0, 1, it.csec.xtext.vsdl.IP.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(osEClass, it.csec.xtext.vsdl.OS.class, "OS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOS_Version(), ecorePackage.getEString(), "version", null, 0, 1, it.csec.xtext.vsdl.OS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(osFamilyEClass, OSFamily.class, "OSFamily", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOSFamily_Family(), ecorePackage.getEString(), "family", null, 0, 1, OSFamily.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ipRangeEClass, IPRange.class, "IPRange", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIPRange_Range(), this.getIPRangeA(), null, "range", null, 0, 1, IPRange.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(gatewayEClass, Gateway.class, "Gateway", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGateway_Internet(), ecorePackage.getEBoolean(), "internet", null, 0, 1, Gateway.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(atEClass, At.class, "At", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAt_Op(), ecorePackage.getEString(), "op", null, 0, 1, At.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAt_Variable(), ecorePackage.getEString(), "variable", null, 0, 1, At.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAt_Texp(), this.getTimeExpr(), null, "texp", null, 0, 1, At.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(switchEClass, Switch.class, "Switch", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSwitch_Variable(), ecorePackage.getEString(), "variable", null, 0, 1, Switch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSwitch_Texp(), this.getTimeExpr(), null, "texp", null, 0, 1, Switch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(plusMinusEClass, PlusMinus.class, "PlusMinus", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(multiplicationEClass, Multiplication.class, "Multiplication", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Initialize enums and add enum literals
    initEEnum(ipOperationEEnum, IPOperation.class, "IPOperation");
    addEEnumLiteral(ipOperationEEnum, IPOperation.CONNECTED);
    addEEnumLiteral(ipOperationEEnum, IPOperation.NOT_CONNECTED);

    initEEnum(hardwareProfileEEnum, HardwareProfile.class, "HardwareProfile");
    addEEnumLiteral(hardwareProfileEEnum, HardwareProfile.TINY);
    addEEnumLiteral(hardwareProfileEEnum, HardwareProfile.MEDIUM);
    addEEnumLiteral(hardwareProfileEEnum, HardwareProfile.LARGE);
    addEEnumLiteral(hardwareProfileEEnum, HardwareProfile.MOBILE);
    addEEnumLiteral(hardwareProfileEEnum, HardwareProfile.WEARABLE);
    addEEnumLiteral(hardwareProfileEEnum, HardwareProfile.SENSOR);
    addEEnumLiteral(hardwareProfileEEnum, HardwareProfile.SERVER);

    // Create resource
    createResource(eNS_URI);
  }

} //VsdlPackageImpl
